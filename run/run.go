package run

import (
	"bytes"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/wzshiming/gen/openapi"
	"github.com/wzshiming/gen/parser"
	"github.com/wzshiming/gen/route"
	"github.com/wzshiming/gotype"
	oaspec "github.com/wzshiming/openapi/spec"
)

func Run(pkgs []string, port string, way string) error {
	for _, pkg := range pkgs {
		get(pkg)
	}

	f, err := file(pkgs, port, way)
	if err != nil {
		return err
	}

	dir := os.TempDir()

	pathOrigin := filepath.Join(dir, "gen-path")

	pwd, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		return err
	}

	path, err := filepath.Rel(pwd, pathOrigin)
	if err != nil {
		return err
	}

	pkg := filepath.Join(path, "src", "gen-run")

	err = os.MkdirAll(pkg, 0755)
	if err != nil {
		return err
	}

	file := filepath.Join(pkg, "main.go")
	err = ioutil.WriteFile(file, f, 0666)
	if err != nil {
		return err
	}

	get(pkg)

	cmd := exec.Command("go", "run", pkg)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	cmd.Stdin = os.Stdin
	err = cmd.Run()
	if err != nil {
		return err
	}
	return nil
}

func get(pkg string) {
	exec.Command("go", "get", pkg).Run()
}

func file(pkgs []string, port string, way string) ([]byte, error) {
	imp := gotype.NewImporter(gotype.WithCommentLocator())
	def := parser.NewParser(imp)

	for _, pkg := range pkgs {
		err := def.Import(pkg, way)
		if err != nil {
			return nil, err
		}
	}

	server := "http://127.0.0.1" + port

	api, err := openapi.NewGenOpenAPI(def.API()).SetInfo(&oaspec.Info{
		Title:       "OpenAPI Demo",
		Description: "The current environment is only used for testing documents, and some interfaces do not work properly. Generated by gen run " + strings.Join(pkgs, " "),
		Version:     "test",
		Contact: &oaspec.Contact{
			Name: "wzshiming",
			URL:  "https://github.com/wzshiming/gen",
		},
	}).WithServices(server).Generate()
	if err != nil {
		return nil, err
	}

	router, err := route.NewGenRoute(def.API()).WithOpenAPI(api).Generate("main", ".", "Router")
	if err != nil {
		return nil, err
	}

	router.AddImport("", "net/http")
	router.AddImport("", "fmt")
	router.AddImport("", "os")
	router.AddImport("", "github.com/gorilla/handlers")

	buf := bytes.NewBuffer(nil)
	err = tpl.Execute(buf, map[string]interface{}{
		"Server": server,
		"Port":   port,
		"Router": router,
	})
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

var tpl = template.Must(template.New("").Parse(temp))

const temp = `
{{ .Router }}

func main() {
	mux := Router()
	mux0 := handlers.RecoveryHandler()(mux)
	mux0 = handlers.CombinedLoggingHandler(os.Stdout, mux0)

	fmt.Printf("Open {{ .Server }}/swagger/#\n")
	fmt.Printf("  or {{ .Server }}/swaggerui/#\n")
	fmt.Printf("  or {{ .Server }}/swaggereditor/#\n")
	fmt.Printf("  or {{ .Server }}/redoc/#\n")
	fmt.Printf("  with your browser.\n")

	err := http.ListenAndServe("{{ .Port }}", mux0)
	if err != nil {
		fmt.Println(err)
	}
	return
}

`
