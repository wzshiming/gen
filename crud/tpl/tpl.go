// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xdd\x6e\xda\x40\x10\x85\xaf\xd9\xa7\x98\x1a\x29\xb2\x11\xb2\xef\x69\x82\x54\xc5\x34\xb5\x84\x42\x54\x88\x7a\x51\x55\x89\x7f\x06\x33\xc9\x7a\xd7\x59\xaf\x83\xa2\x88\x77\xaf\x6c\xec\xfc\xd8\x5b\x1a\x91\x3b\x58\x76\xce\x39\xf3\xcd\x2c\x9e\x07\xe7\x32\x41\x48\x51\xa0\x0a\x35\x26\x5f\xc1\x5f\xc0\xe5\x62\x05\x33\x3f\x58\xb9\x8c\xe5\x61\x7c\x1f\xa6\x08\xa7\xe0\x5e\x35\x1f\xa7\x8c\x51\x96\x4b\xa5\xc1\x66\x03\x2b\x25\xbd\x29\x23\x37\x96\x99\x97\x72\x19\x85\xbc\xa0\x54\x78\x59\x2a\xad\x43\x3f\x7a\x51\x21\x85\xc5\x1c\xc6\x3c\xaf\xd2\xbe\xce\x73\x54\x3f\xca\x2c\x87\xe9\x2f\xd2\x9b\xc0\x07\x2a\x3a\xe7\xb0\x25\xbd\x81\xc0\x67\xfa\x29\x47\x73\x4d\xa1\x55\x19\x6b\x78\x66\x83\xc0\x87\xca\xc1\x5d\x44\x77\x18\xeb\x20\x81\xdb\xea\xeb\xc4\xba\xa1\x64\x2c\x33\xd2\x98\xe5\xfa\xc9\x82\xbb\xfa\xf0\x14\xdc\xb9\xdc\xa2\x5a\x8a\xf0\x1e\x61\x7a\x43\x89\x75\xcb\x06\xa7\xe0\x2e\x14\xa5\x24\x42\x0e\xd3\xb6\x7e\x4c\x82\x93\x40\xeb\x96\xed\x0c\xd1\x97\xa8\x1e\x29\x46\x18\xe6\xa1\xde\x4c\x2c\xaf\x23\xec\x59\x43\x53\xf8\xb6\xea\x35\x7d\x12\xc1\x28\x4b\xa5\x7b\x2e\x39\xc7\x58\x93\x14\x8d\xdd\x25\x6e\xcd\xb5\xe7\x0a\x43\x8d\x10\x82\xc0\xad\x59\x9e\xad\x4b\x11\xff\x53\xc0\xee\x5b\x3a\x60\x8f\x8c\x77\xc7\x80\x4a\x49\xe5\x54\x49\x15\xea\x52\x09\x38\x31\x5e\x7c\x4e\xa2\xdd\x18\x04\xf1\x26\xfd\x4b\xc8\xce\x60\x87\x4a\x96\x1a\x27\xd6\xd5\x62\xb9\x82\x0a\x52\x1d\xd5\x2e\xc0\xec\xef\x34\x42\x76\x8b\xb7\x91\x19\xbd\x9b\x98\x03\x36\x2a\xd5\x8f\x0a\x85\x9b\x44\x6e\x20\x0a\x54\xba\xa3\xe0\x34\x39\xaf\xf3\xa4\xca\xa9\x37\xdd\x49\xbd\x26\xbd\x5e\x81\xf7\xdc\xdf\x9b\xdd\x07\xc2\xef\xd5\x3b\xd6\xbd\x7d\xf5\x46\x30\x14\x61\x86\xc6\xed\x1c\xc2\xc8\x1b\xc3\x51\xed\xd7\xdd\xef\x23\x04\x49\x2f\x44\x57\xb4\x25\xe2\x23\xc7\xc3\x44\xfc\xd9\x7c\xb6\x9a\x1d\x0d\x65\x6f\xf0\x69\x28\x07\xbb\xfe\x89\x99\x7c\x34\x75\xdd\x76\x79\x81\xfa\x50\x8b\x17\xb3\xe3\x87\x7e\x81\xdd\x65\x3b\xaa\x39\xc3\xc8\x7b\xff\x82\xf5\xf3\x7c\x83\xe0\x01\x26\x67\x7b\x00\xdf\x49\x24\xc6\xf6\x07\x55\xc5\x19\x3c\xb8\x0b\x81\xf6\x49\x77\x05\x06\xb4\xae\x25\xbf\x9c\x55\x6f\xb9\x92\x6c\xb1\x0a\xe2\xb5\x1b\x1b\xec\x5e\x50\xbf\xaf\x7e\xfb\xfc\xe7\x54\x68\x90\xeb\xff\x22\xfe\x00\xce\x4a\xca\x96\xeb\x75\x81\x7a\x0c\x9c\x32\xd2\x40\x42\xf7\x00\x15\xf0\xfb\xcf\x11\x8c\x6c\x41\xdc\x71\x97\xf7\x94\x37\x1e\x8e\x3b\xaf\x3c\xec\xda\xe9\x0d\xae\x6f\x9c\x77\x71\x15\x9f\xe3\x55\xb4\xc0\xfe\x06\x00\x00\xff\xff\x7e\xbc\x86\x56\x99\x07\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 1945, mode: os.FileMode(420), modTime: time.Unix(1546407863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

