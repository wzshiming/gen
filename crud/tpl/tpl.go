// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// mock.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xdb\x38\x13\x7d\xb6\x7e\xc5\x54\x29\x02\x29\x35\xe4\x7e\xaf\x6a\x1d\xe0\x43\xec\x76\x8d\x0d\x92\xa2\x49\xb1\xc0\x16\x45\xab\xcb\xd8\x61\x2b\x91\x2e\x45\xdb\x5b\xb8\xfe\xef\x0b\x5e\x64\x51\x37\xc7\xb9\x3c\xae\x9f\x64\x72\x38\x43\x9e\x73\x38\x1c\x72\x34\x82\x0b\x96\x22\x2c\x90\x22\x8f\x04\xa6\x6f\x60\xc2\x80\x32\x01\x1c\xcb\x36\x10\x77\x08\x6c\x8d\x7c\xc3\x89\x40\x88\xe6\x02\x39\x60\x4a\x04\xa1\x8b\xc0\x71\x96\x51\xf2\x23\x5a\x20\xbc\x85\xe0\x83\xf9\x3c\x77\x1c\x92\x2f\x19\x17\xe0\x39\x03\x57\x90\x1c\x5d\xc7\x19\xb8\x0b\x22\xee\x56\x71\x90\xb0\x7c\xb4\xc8\x58\x1c\x65\x05\x59\xd0\x51\xbe\x60\xee\xa1\xce\x51\x5c\x30\xea\x3a\xbe\xe3\x8c\x46\x32\xc8\xa7\xe5\x12\xf9\x1f\xab\x7c\x09\xe7\x7f\x11\x71\x37\x9b\x00\x29\x1a\xed\xb0\x21\xe2\x0e\x66\x13\x47\xfc\x5a\x62\xf7\x98\x42\xf0\x55\x22\x60\xeb\x0c\x66\x13\x90\x11\x82\xeb\xf8\x3b\x26\x62\x96\x82\xfc\x7d\x93\x4d\xa1\xfb\x95\xa4\x43\x96\x13\x81\xf9\x52\xfc\x72\xe1\xbb\x6a\x7c\x0b\xc1\x25\xdb\x20\xbf\xa1\xd1\x0f\x84\xf3\xaf\x24\x75\xbf\x39\x83\xc6\x0c\xc0\x76\x33\x24\x34\x23\x14\xa5\xd9\x05\xc7\x48\xe0\x2d\xc9\x11\x24\x2e\x81\xfa\x32\x66\x89\xea\xfb\x2a\xdb\xdb\x51\xad\x4e\xe9\xe7\xd3\x32\xed\xf5\xb3\x52\x7d\x3d\x7e\xac\x4e\xf7\x9b\xb3\x73\xba\x30\xfa\x88\x09\xe3\x69\x1d\xa3\xc6\xaf\x09\xd9\x43\x00\xe3\xca\x7d\x27\x6e\x32\x50\x8f\xeb\x36\xec\xc7\x52\xf3\x11\x13\xa4\xc2\x9e\xfd\x59\x83\x2d\x13\x82\x2b\xc3\xb6\x5b\xdd\xae\xe8\x5b\x71\x5e\xf7\xd5\xe3\x2a\xd1\x86\x1d\x3c\xea\x8e\x6a\x5e\x8a\x39\xf3\xab\xa8\xac\xe9\x47\xc7\xef\x21\xd4\xea\xb4\x66\x68\x39\xe9\x71\x6a\x26\xd2\x27\x37\xab\x57\xba\x95\xe3\x8b\x9a\x02\x48\x1d\xd2\xd2\xad\x1c\x50\xb4\xfd\xa9\x66\x2d\xb8\xd6\x36\xbe\x41\xbe\x26\x09\xc2\xc9\x32\x12\x77\xa1\x3b\x6a\xb0\x38\x72\x4f\xba\x44\x5a\x8e\xaa\x54\x9a\xc6\x25\x27\xf9\x82\x05\x17\x2c\xcb\x30\x11\x84\x51\xd9\x63\x24\xdd\xec\xd1\xd3\xb9\xc2\x4d\xb7\x6f\xbd\x5b\x21\x02\x8a\x9b\xee\xf0\xce\x7c\x45\x93\x5e\x07\x5e\x1a\x37\x43\xfa\xe0\x9d\x75\xda\x0e\x01\x39\x67\xdc\xd7\x2b\x31\xf3\x0d\xc7\x90\xc6\xc1\x24\x12\x51\x1c\x15\x18\x5c\x78\x69\x1c\x5c\x45\x39\xc2\x2b\x70\xcd\x3e\x72\xfd\xca\x3e\x98\xd2\x62\xc5\x71\x46\x53\xfc\xc7\x93\x71\xd5\xd7\xf6\x4f\xfc\x15\xc2\xe7\x2f\x85\xe0\x84\x2e\xb6\x5d\xbb\x64\xb7\xf3\x9d\x01\x47\xb1\xe2\x14\x4e\x3b\xa7\xb7\x75\x06\x83\x34\x0e\x0d\xc2\x69\x3c\x54\xff\x75\xd8\x10\xca\xaf\xa1\x33\xd8\x0d\x81\x92\xcc\x20\xbb\x07\xb0\xb1\x4b\x4e\x38\x5b\x09\x0c\xdd\x0f\xd7\x37\xb7\x20\x09\x56\x30\x7a\x45\x73\x3b\x99\xe0\xbe\x71\xe4\x95\x53\x37\x6e\x1a\xd6\x3e\x34\x0c\x5a\xb9\x7d\x74\x06\x27\x34\xca\xb1\x33\x55\x9c\xc0\xd9\x48\xb1\x60\x31\xd1\xf2\x37\xd6\x1e\xaf\x70\x53\x3a\xf5\x7c\x67\x40\xd9\x46\x72\xa5\xbb\xd8\x46\x36\x49\x3f\x63\x28\x82\x34\x0e\x66\xb4\x40\x2e\xbc\xd3\xce\x93\x48\x02\x3b\x9b\x84\xd0\x8c\x24\x01\x7e\x0b\xc1\x35\x27\x0b\x42\xa3\x0c\xce\x43\xb5\x5c\xcb\x46\x5a\x54\xe7\x49\x08\x94\x6d\x64\x53\x75\x34\x94\x4d\x92\x5c\x32\x57\x2b\x7b\x31\x96\xec\xa8\xa0\x86\x6e\xd7\x55\x6b\x76\x06\xbb\xbd\x02\x5a\x53\xb1\x18\xd5\xde\x55\x4d\xd0\xc7\xe9\xa7\x5b\x18\x6d\xdb\xf8\xee\x8e\xa0\x59\x7b\x7f\x06\x16\xef\x15\x4a\x9d\x66\x83\x4e\x28\x09\xd3\xdb\xaa\x35\x87\xa6\x4f\xff\x4d\x0f\xa0\x06\xcc\x3d\x9a\x4a\x02\x7a\x61\xb3\x2e\xb7\x6a\x6d\x93\xed\xd6\x7d\x59\xa0\x70\x87\xcd\xfd\xa7\x65\xb2\xd5\x6a\xb0\xda\x43\x73\xf8\x34\x04\x61\xb3\x5f\xc9\x51\x8a\x40\xee\x71\xcd\xe1\x04\x33\x3c\xcc\xe1\x64\x7a\x39\xbd\x9d\x3e\x9a\x46\x1d\xe0\xc9\x34\x3e\x8e\x26\x4a\xb2\x87\x71\xf3\x11\x73\xb6\xee\xe2\xa6\xc4\xeb\x3d\x8a\x43\x60\xbd\x9f\x3e\x5e\xf0\xef\x51\x3c\x07\x4c\x87\xe5\xae\x25\xd4\x4c\x6d\x3f\x35\x8e\x69\x1c\xbc\x23\x34\xed\x5c\xbe\x49\x62\x3f\x83\x6b\x8a\x2a\x7d\xd9\xfa\x3f\x90\x53\x28\xc9\xee\x49\x2a\x76\x4a\xb9\x24\x85\x00\x36\xbf\x17\xe2\x23\xe0\x94\xae\xbc\x42\x44\x5c\x17\x40\x15\x74\xaa\x4d\x57\x33\x26\xcd\xd3\xb4\x51\x3d\x57\xc6\x48\x53\xdb\x94\xcd\xe7\x05\x8a\x21\x64\x24\x27\x42\xd6\x3d\x2d\xc0\x0b\xf8\xfc\xe5\x28\xcc\xf3\xfd\x29\x31\xd9\xee\x14\x80\x2f\xf6\xb3\x0d\x66\xc5\xdf\xc8\x99\xe7\xc3\xef\xdf\xf0\xc2\xcc\xaf\x6a\x94\xf0\xe6\xaf\xeb\xe3\xfb\x1c\x48\x5b\x69\x3c\x86\x68\xb9\x44\x9a\x7a\xf9\xeb\x32\xcf\xb0\x64\x9a\x61\xbe\x75\x5f\x2e\x04\xba\x43\xd8\x0f\x96\x67\xc4\xa0\x74\xd9\x19\xfc\x3e\x87\x99\x4c\x5e\x66\xe4\xde\x5b\x6e\x0d\x69\x8e\xb0\xaf\x34\x43\xc8\x5f\xcb\x41\xbb\xa6\x2e\xbd\xdc\x0f\x6e\x7e\x90\xa5\xa7\x59\xf0\x83\x4b\xc9\x82\xa7\xb8\xb0\x04\xfa\xff\x2c\x6b\x0a\xb4\x78\x9a\x42\x8b\x5a\x1d\xc3\x56\xf4\x28\x8d\x26\xd2\xf0\x98\x7a\x46\xda\x3d\xb3\x52\x7d\xf0\x54\x78\x29\xd1\xff\x84\xf7\x0c\xc2\xdb\x2b\xe3\x67\xa0\xf9\x2a\x0f\x04\x5d\xec\x1e\xc8\x5b\xfa\x70\x82\x4c\x5a\xd4\xf4\xa1\x3b\x1e\x7b\x5a\x54\x71\x9f\xa1\x44\xba\x3f\xad\xe9\x70\x1d\xc9\xcd\x14\xfb\x07\x34\xd6\x79\xcb\x68\x96\x50\xb3\xc9\xce\x86\xdd\xdc\x61\x9e\xb6\xeb\xcd\x9c\x9f\xb6\xf7\x8d\x13\x3b\x03\xe8\xa6\x43\x79\xc0\x70\xae\xb7\xe0\xb1\xa4\x1f\x9d\x30\xac\xf8\xcf\x51\x30\x1c\x95\x28\x9e\x4e\x62\xf7\x0e\xba\x6f\xad\x3d\xa5\x5d\x7d\x99\x43\x30\x6f\x14\xed\xe2\x5e\xad\x46\x2e\x66\x3d\xac\xea\xc5\xae\x4a\xab\xa5\x92\xd3\xd3\xf2\x9f\xbc\x3d\x4f\x39\xbf\x62\xe2\x1d\x5b\xd1\xb4\x5d\x43\x0e\x14\x84\x56\x80\xfa\xda\x1f\x0a\xa1\xbf\x07\xa8\x5f\xb8\x95\x66\xcb\xc7\x81\xd3\xae\x7d\xd9\xbe\x2b\xf4\xdd\x2f\xcd\x63\x51\x58\xbd\xe2\x94\xef\x56\x55\xa7\xbe\x4a\x54\x8f\x7e\xe5\x7d\x42\x3f\x09\x85\xf6\x13\x90\x16\xd5\x2b\xf8\xdf\x50\x4d\x93\xcc\x61\x5d\x5f\x85\x82\xc7\x3c\xc7\x8d\xe1\x74\x1d\xd4\xa7\xd9\xb4\x51\x87\xdd\x18\xd6\x41\x75\xa9\xb1\xf7\xac\x05\xb9\xb9\x61\xeb\xd1\x4a\x63\xff\x06\x00\x00\xff\xff\x03\xf9\xaa\x61\xda\x16\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 5850, mode: os.FileMode(420), modTime: time.Unix(1550851014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mockGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xf2\x36\x14\x7d\x8e\x7f\xc5\x59\x90\x50\x42\x33\xd2\xbe\xb2\xc2\x4b\x41\x1d\x52\xd5\x56\x6a\xab\x3d\x54\x55\x9b\x91\x1b\xf0\x1a\xec\xc8\x31\xb0\x09\xf8\xef\x93\x9d\xd0\x42\x92\xb2\x8e\x97\xef\x7b\xc2\xbe\xb9\x3e\xf7\xf8\x1c\xdf\x4b\x18\xe2\x4a\xc6\x84\x29\x09\x52\x91\xa6\xf8\x37\x0c\x25\x84\xd4\x50\xb4\x8b\x41\xcf\x08\x72\x49\x6a\xa5\xb8\x26\x44\x89\x26\x05\x8a\xb9\xe6\x62\xda\x65\x2c\x8b\x26\xef\xd1\x94\x70\x89\xee\x7d\xb9\x1c\x30\xc6\xe7\x99\x54\x1a\x1e\x73\x5c\x52\x4a\xaa\xdc\x65\x3e\x63\x2c\x0c\x4d\xde\x53\x96\x91\xfa\x7d\x31\xcf\x30\xf8\x83\xeb\xd9\x78\x08\x9e\x57\xe2\x58\x71\x3d\xc3\x78\xc8\xf4\x3f\x19\x35\x9f\xc9\xb5\x5a\x4c\x34\xd6\xcc\x31\x00\x42\xe3\xed\xaf\x5c\x8a\x9e\x7b\x89\xee\x8d\x5c\x91\x7a\x10\xd1\x3b\x61\xf0\xca\xe3\x20\xd7\x8a\x8b\xa9\xfb\xc6\x9c\x4b\x74\xef\x14\x9f\x72\x11\xa5\x18\xb0\x6d\x03\xa3\x07\x52\x4b\x3e\x21\xb4\xb2\x48\xcf\x7a\x6e\x58\x81\x0b\xdd\x56\x13\xa7\xdd\xa9\x4f\x52\x71\xa4\xa3\x1c\xcf\x2f\x9d\x26\xf2\x65\xe5\x5b\x5a\x35\xc3\x5c\x29\x32\xca\x47\x10\xb4\x6a\xae\xc4\x92\x85\x98\x7c\x09\xe0\xf9\xf0\x3a\x8d\x5f\x02\x58\x3f\x7c\x43\x51\x91\x5e\x28\x81\x76\x63\xe2\x7a\x1b\x40\xf0\xb4\x64\xfa\x41\xa8\x62\x53\x4b\xc9\x85\xa6\x9e\x7b\x7f\xf7\xf0\x08\xa3\x8d\xa5\xe5\xe5\x68\xae\xee\x97\x40\xde\x4e\xd5\x12\xa6\x73\xe0\x8b\x0f\x8f\x94\xda\x23\x7a\x98\x3d\x1e\xa2\xd7\x47\x4a\xc2\xcb\xbb\x56\x65\x1f\x67\xb8\x28\x14\x37\x5f\xda\x8d\xcf\x65\xcd\x1c\x67\x3c\xec\xa1\x86\x15\x30\xe7\xf0\x59\xf4\x2c\x9d\xbd\xa4\x80\x39\x5b\xe6\x94\xc5\xd0\x47\x94\x65\x24\xe2\x5d\xf5\x00\xe6\xc7\xff\x90\xf3\x53\xb4\xa7\x2c\xde\xf5\xcf\x57\xb2\x3d\x3d\x22\x5c\xd7\x5f\xec\xf6\x1b\x4a\x16\xe8\x5e\xed\x3e\xa6\x15\xc2\x0e\x5a\x22\x9a\x53\x53\x37\xb8\x2d\x74\xc2\x00\xff\xcf\x01\x9e\xe0\x1c\x83\x7e\x5d\xbd\xcd\xa6\x1e\x1b\x1c\x9a\xb3\xd9\xa0\x5c\x3f\x57\x53\x7f\xbd\x78\x41\xbf\x6f\x24\xb3\xfe\x94\x0a\x16\x13\xa3\x7b\x4b\x2b\xcf\xe5\x31\x62\x49\xb9\x9d\x49\xf4\x37\xcf\xb5\xeb\x5b\x37\x96\xc6\xe9\x23\xb0\xcc\x59\x76\x0f\xae\x84\x7e\xd5\xd6\x06\xc7\x86\x94\xd2\x71\xc7\x86\xa3\x9b\xd1\xe3\xe8\x64\xd3\x8a\x02\x27\x9a\xf6\xf3\xbb\x72\x14\xd1\xea\x5c\xd7\xfc\x9a\xf4\x31\xc1\xaf\x47\xa7\xb7\xc8\x35\xe9\xd3\xa5\x6e\x68\x90\xda\x54\xb1\xd3\xf4\x47\x19\x22\x78\x1a\x7c\xcb\x95\x32\xff\x08\xfa\xfe\xa8\xbf\xe1\xb9\x86\x4c\xfe\xd3\x93\x6f\xe8\x6f\xa0\x3c\x99\x24\x39\xe9\x00\x29\x9f\x73\x6d\xd4\xaf\x69\xfb\xe5\xdf\x64\x55\x5e\x99\x24\xa6\xed\xcf\x99\x93\xf2\x79\xb9\x4a\xa4\xc2\x6b\x00\x3b\x0f\x54\x24\xa6\xb4\xbb\xa7\x95\x8a\x27\x58\xe2\x97\x4f\xe9\x4c\xa0\x20\x64\xa2\xe7\x68\xb7\x61\xf6\x66\x53\x86\x6d\x96\xa9\x74\x76\x66\x57\x13\x29\x34\x17\x0b\x32\x9b\x6d\x89\x50\x5c\xa5\x6f\x00\x36\x1b\xb3\x33\xe7\x6d\xb0\x38\x9d\xf2\x79\x79\xba\x7a\xd1\x8f\x3f\x8f\xca\x87\x00\x4b\xdf\x1e\x28\xd0\x0d\x76\x51\xa4\x00\x74\xfe\x54\x14\xbd\xdb\xe5\xb6\x91\xd5\x76\xdf\xe8\x1a\x76\x61\xee\xbf\x01\x00\x00\xff\xff\x2f\xd6\x95\x71\xed\x09\x00\x00"

func mockGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mockGoTpl,
		"mock.go.tpl",
	)
}

func mockGoTpl() (*asset, error) {
	bytes, err := mockGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock.go.tpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1546799589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
	"mock.go.tpl": mockGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
	"mock.go.tpl": &bintree{mockGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

