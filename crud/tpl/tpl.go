// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x5f\x6f\xda\x30\x14\xc5\x9f\xe3\x4f\x71\x97\x4a\x55\x52\x45\xc9\x3b\x5b\x2b\x4d\x84\x55\x48\xa8\x54\x2b\xd5\x1e\xa6\xa9\xcd\x9f\x4b\xb8\xab\x63\xa7\xb6\x53\x54\x21\xbe\xfb\x94\x10\x28\x24\x81\x4d\xec\x0d\x2c\xdf\x73\x7e\xe7\xd8\x4e\x10\xc0\x50\xa6\x08\x19\x0a\x54\x91\xc1\xf4\x33\x84\x53\xb8\x9b\xce\x60\x14\x8e\x67\x3e\x63\x45\x94\xbc\x44\x19\xc2\x17\xf0\xef\x9b\x9f\x37\x8c\x51\x5e\x48\x65\xc0\x61\x96\x9d\x91\x59\x94\xb1\x9f\xc8\x3c\xc8\xb8\x8c\x23\xae\x29\x13\x41\x9e\x49\x9b\xb9\x8c\x05\x41\x35\x39\x54\x65\xfa\x58\x14\xa8\xe0\xe6\x07\x99\xc5\x38\x04\xd2\xad\x75\x58\x92\x59\xc0\x38\x64\xe6\xbd\xc0\xfe\x19\x6d\x54\x99\x18\x58\x31\x6b\xf3\x87\x44\x06\xcf\xb1\x96\x62\x60\x3f\x51\xea\xc9\x9c\x0c\xe6\x85\x79\xb7\xe1\x77\xbd\xd8\x88\x4c\xe4\xb2\x12\x79\xa2\xd4\x7e\x66\x56\xcb\xb5\x99\xf7\x48\x70\x12\x68\x3f\xb3\x75\x0f\xf3\x03\xaa\x37\x4a\x10\x2e\x8a\xc8\x2c\x06\x76\x70\x28\x1c\xd8\x17\x7d\xd0\xdb\xa1\x0f\xea\x34\x86\xab\x3c\x93\xfe\x50\x72\x8e\x89\x21\x29\x1a\xb7\x3b\x5c\xf6\xcf\x0e\x15\x46\x06\x21\x02\x81\xcb\x7e\x79\x36\x2f\x45\x72\x54\xc0\xe9\x5a\xba\xe0\x5c\xf5\xee\xf5\x00\x95\x92\xca\xad\x48\x15\x9a\x52\x09\xb8\xec\xdd\xb8\x4a\xe3\xb5\x07\x82\x78\x43\xbf\x83\x6c\x55\x7b\xa1\x64\x69\x70\x60\xdf\x4f\x1f\x66\x50\x95\x54\xa3\x3a\x31\xf4\xfb\xbb\x8d\x90\x73\xd8\x6e\x7b\xb7\x0b\x0e\x2a\xd5\x65\x8d\xfd\x34\xf6\xc7\x42\xa3\x32\x2d\x05\xb7\xe1\x7c\x2c\xd2\x8a\xd3\x2c\xda\x27\xf5\x41\xfa\x38\x83\x60\xd5\xb9\x36\xeb\x1d\xbb\x3e\xca\xbe\x11\x77\x3a\xb3\xcd\x3d\xf5\xe0\xbc\x54\xba\x4a\xb5\xd1\x1e\xa7\x5d\xf5\xb6\xec\x36\x6a\x88\x1c\x4f\x47\x0d\x47\x93\xd1\x6c\x74\x6e\xda\x8d\xfe\xd1\xb4\x27\xd3\x7c\xc7\x5c\xbe\xf5\xa6\xd9\xd2\xdf\xa2\x39\x85\x7e\x3b\x3a\xfb\x94\x6e\xb1\x7d\x39\x0e\xa0\x4f\x9f\x51\xfd\x40\xf6\x42\xbd\xc2\xe0\x7a\x13\xe9\x1b\x89\xb4\x3f\x90\x55\x8d\x5c\xc3\xab\x3f\x15\xe8\x5c\xb6\x0f\xcb\xa2\x79\xad\xf9\xe9\xba\x7a\x4e\x95\xe6\xb6\x29\x41\xbc\xb6\x63\xd6\x7a\xd7\xde\xe1\xf4\xfe\x0b\x9c\x90\x36\x20\xe7\x7f\x2d\xed\x1f\x1a\xaa\xa4\x1c\x39\x9f\x6b\x34\x1e\x70\xca\xc9\x00\x09\xd3\xe9\x46\xc3\xcf\x5f\x57\x7d\x1f\xe9\xd3\x25\x39\x82\xb8\xeb\x3f\xbc\x50\xd1\x78\xb8\xfe\xa4\xf2\x70\x6a\xa7\xbd\xba\xbe\x72\xde\xae\x4b\xff\x5f\x5f\x7a\x5b\xd8\x9f\x00\x00\x00\xff\xff\xae\x73\x4b\xcc\xf2\x06\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 1778, mode: os.FileMode(420), modTime: time.Unix(1546195954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

