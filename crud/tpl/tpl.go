// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x6f\x4f\xa3\x30\x18\x7f\xbd\x7e\x8a\xe7\x30\x31\x60\x16\x78\xbf\x3b\x4d\x2e\x63\x67\x48\x16\x67\xce\x99\x7b\x71\xb9\x28\xd0\x67\xac\x5a\x5a\x6c\x8b\x8b\x31\xfb\xee\x97\x32\xa6\x0e\x2a\x5e\xbc\x77\x50\xfa\xfb\xfb\xb4\x44\x11\x4c\x25\x45\x28\x50\xa0\x4a\x0d\xd2\xaf\x10\x2f\xe0\x62\xb1\x84\x59\x9c\x2c\x43\x42\xaa\x34\xbf\x4f\x0b\x84\x6f\x10\x5e\xb6\x8f\x67\x84\xb0\xb2\x92\xca\x80\x4f\x46\x5e\xc1\xcc\xba\xce\xc2\x5c\x96\x51\xc1\x65\x96\x72\xcd\x0a\x11\x95\x85\xf4\x86\x3e\x46\x99\x96\xc2\x23\x01\x21\x51\x64\xb9\xa7\xaa\xa6\xd7\x55\x85\x0a\xce\x7e\x31\xb3\x4e\x62\x60\xba\xb3\x0e\x1b\x66\xd6\x90\xc4\xc4\x3c\x55\xe8\xc6\x68\xa3\xea\xdc\xc0\x33\x19\x25\x31\x58\x85\x70\x91\xdd\x61\x6e\x12\x0a\xb7\xf6\x75\xe2\xdd\x30\x3a\x96\x25\x33\x58\x56\xe6\xc9\x83\xbb\x66\xb1\xe5\x9a\xcb\x8d\xe5\xba\x61\xd4\xbb\x25\xa3\x8e\x78\x8b\x1f\x33\xc1\x99\x40\xef\x96\x6c\x1d\xd6\xaf\x50\x3d\xb2\x1c\xe1\xa8\x4a\xcd\x7a\xe2\x45\x87\xc4\x91\x77\xe4\xf2\xbe\x07\xbd\x9a\xa7\x19\x9c\x94\x85\x0c\xa7\x92\x73\xcc\x0d\x93\xa2\x55\xbb\xc0\x8d\x1b\x3b\x55\x98\x1a\x84\x14\x04\x6e\xdc\xf4\x64\x55\x8b\xfc\x5d\x02\xbf\x2f\x19\x80\x7f\xe2\xdc\x3b\x06\x54\x4a\xaa\xc0\x3a\x55\x68\x6a\x25\xe0\xd8\xb9\xf1\x99\x66\xdb\x31\x08\xc6\x5b\xf7\x2f\x26\x3b\xd5\x1e\x29\x59\x1b\x9c\x78\x97\x8b\xab\x25\xd8\x92\x1a\xab\x7e\x06\x6e\xfd\xa0\x25\xf2\x0f\xdb\xed\xee\x0e\xc0\x47\xa5\xfa\x5e\xb3\x90\x66\x61\x22\x34\x2a\xd3\x61\x08\x5a\x9f\xd7\x15\xb5\x3e\xcd\xba\x3b\xa9\x57\xa7\xd7\x4b\x88\x9e\x7b\xc7\x66\xfb\xe2\x5d\xbf\xeb\x7d\x47\xee\xf7\xb0\x87\xc7\x75\x0c\x9f\x0b\xa7\x6d\xb8\x9d\x44\x42\xfb\x22\x5d\xda\x7d\xe2\x18\x39\x0e\x27\x8e\x67\xf3\xd9\x72\xf6\xd9\xd0\x3b\xfe\x8f\x42\x0f\x86\xfa\x89\xa5\x7c\x74\x86\xda\x87\x38\x47\x33\x94\xe0\x7c\xf6\xe9\x99\x9d\x63\xf7\xa8\xb8\xbc\x0f\x4f\xac\xb9\x35\x6f\xb2\x3d\xc0\xe4\x74\x97\xec\x07\x13\xd4\x9d\x6b\x64\x21\xa7\xf0\x10\x2e\x04\xfa\xc7\xdd\xd1\x8d\xd8\xaa\xe1\xfc\x72\x6a\xef\x98\xe5\xdc\x17\x26\x18\x6f\xe4\xc8\x68\xfb\x52\xe2\x21\xfa\xed\xb5\x9c\x33\x6d\x40\xae\x3e\xec\xee\x1f\x8a\xb2\x54\xbe\x5c\xad\x34\x9a\x31\x70\x56\x32\x03\x4c\x98\x5e\x37\x1a\x7e\xff\x39\x71\xfd\xc0\x87\x4b\xf2\x05\xe3\x41\x78\x75\xcf\xaa\x56\x23\x08\xe7\x56\xc3\x6f\x94\xde\xd4\xf5\x9d\xf3\x6e\x5d\xfa\xff\xfa\xd2\xfb\xc2\xfe\x06\x00\x00\xff\xff\x0c\x66\x3d\xc7\x30\x07\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 1840, mode: os.FileMode(420), modTime: time.Unix(1546307070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

