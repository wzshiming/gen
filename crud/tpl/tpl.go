// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// mock.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xd4\x38\x10\xfe\x9c\xfc\x8a\x21\x45\x28\x29\x51\xc2\x7d\x0d\xb4\xd2\xa9\xdb\xe3\x56\x57\x51\x44\x8b\x4e\x3a\x84\x20\x2f\xd3\xad\x21\xb1\x83\xe3\xdd\x3d\xb4\xe4\xbf\x9f\xfc\x92\xcd\x7b\xbb\x94\x7e\xbc\x7c\xda\xb5\xc7\xcf\x8c\x9f\x67\xc6\x9e\x24\x0c\xe1\x8c\x65\x08\x2b\xa4\xc8\x63\x81\xd9\x4b\x58\x30\xa0\x4c\x00\xc7\x66\x0c\xc4\x2d\x02\xdb\x20\xdf\x72\x22\x10\xe2\x1b\x81\x1c\x30\x23\x82\xd0\x55\x60\xdb\x65\x9c\x7e\x8d\x57\x08\xaf\x20\x78\x6b\x7e\x9e\xda\x36\x29\x4a\xc6\x05\xb8\xb6\xe5\x08\x52\xa0\x63\xdb\x96\xb3\x22\xe2\x76\x9d\x04\x29\x2b\xc2\x55\xce\x92\x38\xaf\xc8\x8a\x86\xc5\x8a\x39\x77\x4d\x86\x49\xc5\xa8\x63\x7b\xb6\x1d\x86\xd2\xc9\xfb\xb2\x44\xfe\xe7\xba\x28\xe1\xf4\x6f\x22\x6e\x97\x0b\x20\xd5\x60\x1c\xb6\x44\xdc\xc2\x72\x61\x8b\xef\x25\x4e\xaf\xa9\x04\x5f\xa7\x02\x76\xb6\xb5\x5c\x80\xf4\x10\x5c\x26\x5f\x30\x15\xcb\x0c\xe4\xf3\x59\x0e\x45\xce\x27\x92\xf9\xac\x20\x02\x8b\x52\x7c\x77\xe0\x8b\x1a\x7c\x05\xc1\x05\xdb\x22\xbf\xa2\xf1\x57\x84\xd3\x4f\x24\x73\x3e\xdb\xd6\x20\x02\xe8\xc2\xf8\x84\xe6\x84\xa2\x34\x3b\xe3\x18\x0b\xbc\x26\x05\x82\xe4\x25\x50\xbf\x8c\x59\xaa\xe6\x3e\xc9\xf1\xb1\xd7\xce\xa4\xc4\x79\x5f\x66\xb3\x38\x6b\x35\x37\x83\xd3\x99\x74\x3e\xdb\xb5\x3d\xc5\xd1\x3b\x4c\x19\xcf\xfa\x1c\x0d\x9e\x21\x65\x3f\x43\x18\x57\xf0\x93\xbc\x49\x47\x33\xd0\x63\xda\x0f\x95\xe6\x1d\xa6\x48\x45\x37\xfa\xe3\x81\x5a\xc6\x05\x57\x86\x63\x58\x3d\xae\xe4\x5b\x73\xde\xc7\x9a\x81\x4a\xb5\xe1\x84\x8e\x7a\xa2\x8d\x4b\x29\x67\x9e\x56\xca\x5e\xfe\x68\xff\x33\x82\x76\x26\x3b\x11\x76\x40\x66\x40\x4d\x20\x73\xe9\xd6\x99\x95\xb0\x72\x7d\xd5\xcb\x00\xd2\xa7\xb4\x81\x95\x0b\xaa\x31\x9e\x1a\xd6\x09\x37\x2a\xe3\x2b\xe4\x1b\x92\x22\x1c\x95\xb1\xb8\x8d\x9c\x70\xa0\x62\xe8\x1c\x4d\x25\x69\xb3\xaa\xcd\xd2\x2c\x69\x34\x29\x56\x2c\x38\x63\x79\x8e\xa9\x20\x8c\xca\x19\x93\xd2\xc3\x19\x1d\xce\x1b\xdc\x4e\x63\xeb\x6a\x85\x18\x28\x6e\xa7\xdd\xdb\x37\x6b\x9a\xce\x02\xb8\x59\x32\x74\xe9\x81\x7b\x3c\x69\xeb\x03\x72\xce\xb8\xa7\x77\x62\xe2\x8d\x4e\x20\x4b\x82\x45\x2c\xe2\x24\xae\x30\x38\x73\xb3\x24\x78\x13\x17\x08\xcf\xc1\x31\x75\xe4\x78\xad\x7d\x70\x4e\xab\x35\xc7\x25\xcd\xf0\x5f\x57\xfa\x55\xbf\x76\x7f\xe1\xf7\x08\x3e\x7c\xac\x04\x27\x74\xb5\x9b\xaa\x92\xba\xf6\x6c\x8b\xa3\x58\x73\x0a\xcf\x26\xc3\xdb\xd9\x96\x95\x25\x91\x61\x38\x4b\x7c\xf5\x5f\xbb\x8d\xa0\xf9\xe5\xdb\x56\xed\x03\x25\xb9\x61\x76\x4f\xe0\xa0\x4a\x8e\x38\x5b\x0b\x8c\x9c\xb7\x97\x57\xd7\x20\x05\x56\x34\xba\xd5\xb0\x9c\x8c\x73\xcf\x00\xb9\x4d\xe8\x06\x66\x60\xed\xc1\xc0\x60\x74\xb6\x87\xc7\x70\x44\xe3\x02\x27\x8f\x8a\x23\x38\x0e\x95\x0a\xad\x12\x72\xaf\x23\xc8\x13\x0d\xfa\x06\xb7\x0d\xae\xeb\x29\x4b\xb9\xf4\x04\xaa\x20\x4b\x82\x25\xad\x90\x0b\xf7\xd9\xe4\xe5\xa3\x71\xe5\xb3\x5c\x44\x23\x7c\x7f\x3f\xfb\x0a\x82\x4b\x4e\x56\x84\xc6\x39\x9c\x46\x6a\xb7\x1d\x4b\xa9\x40\x7b\x0d\x44\x26\x28\xb6\x75\x3d\x8d\x50\xeb\xa0\xc8\x8d\x8a\xeb\xc9\x89\x94\xa5\xe3\xda\xa8\xed\x38\x6a\xcb\x7a\x85\xdd\x99\x18\x85\xd5\x91\x55\xbb\x55\x8d\xc1\x9c\xb0\xef\xaf\x21\xdc\x8d\x49\xae\x0f\xd0\x5a\xa3\x3f\x82\x94\xf7\x66\x4b\x4f\x6b\xcb\x30\x15\x49\x09\x75\x6d\x8d\x62\x18\x62\x7a\x2f\xfb\xe4\x5a\x4d\x11\x49\x4a\xad\xda\xde\x17\x95\x4a\x0a\xbd\xb1\xe5\x14\xac\xda\xdb\x62\xb7\x73\x9e\x56\x28\x1c\x7f\x58\x84\x3a\x71\x24\x7e\x7f\x3c\x32\x37\xd0\x81\x69\x61\xd5\xb2\xd0\xb5\x86\x0b\xcc\xf1\x6e\x0d\x17\xe7\x17\xe7\xd7\xe7\x0f\x96\x51\x3b\xf8\x65\x19\x1f\x26\x13\x25\xf9\xcf\x69\xf3\x0e\x0b\xb6\x99\xd2\xa6\xe1\xeb\x35\x8a\xbb\xc8\x7a\x7d\xfe\xf0\x84\x7f\x8d\xe2\x31\x68\xba\x3b\xdd\x75\x0a\x0d\xce\x37\xeb\x9b\xe6\x31\x4b\x82\x3f\x08\xcd\x26\xb7\x6f\xe9\x63\xed\x5b\x70\x49\x51\x1d\x68\xdd\xfc\xdf\xcb\x31\xa6\x99\x92\xdc\x6f\xb8\xb6\x26\x0f\x95\xee\x91\x72\x41\x2a\x01\xec\xe6\x5e\x8a\x0f\xa0\x53\x42\xb9\x95\x88\xb9\xee\x82\x5a\xea\xd4\x98\x6e\x69\xcc\x59\x4f\xb3\x41\x0b\xdd\x1a\x23\xcd\xba\xa6\xec\xe6\xa6\x42\xe1\x43\x4e\x0a\x22\x64\xf3\x33\x22\xbc\x82\x0f\x1f\x0f\xe1\x5c\x9e\xb1\x85\xa4\xdd\xd4\x7c\xad\x38\x7c\xb2\x0f\x38\x58\x56\xff\x20\x67\xae\x07\x3f\x7e\xc0\x13\x13\x62\x3b\x28\x19\x2e\x5e\xf4\xd7\xcf\x01\x48\x5b\x69\x7c\x02\x71\x59\x22\xcd\xdc\xe2\x45\x73\xd4\xb0\xf4\x3c\xc7\x62\xe7\x3c\x5d\x09\x74\x7c\xd8\x2f\x96\x8d\x80\xd5\x40\x4e\x3a\xbf\x0f\x30\x97\xe7\x97\x59\xb9\x47\x2b\x3a\x4b\x86\x2b\xba\xaf\x36\x3e\x14\x2f\xe4\xa2\x7a\x98\x9a\x6e\xe1\x05\x57\x5f\x49\xe9\x6a\x21\xbc\xe0\x42\x0a\xe1\x2a\x39\x3a\x39\xfa\x7b\x9e\x0f\x73\xb4\xfa\xb5\x24\xad\x7a\xfd\x0c\x5b\xd3\x83\xd2\x34\x95\x86\x87\xf4\x35\xd2\xee\x91\x93\xd5\x03\x57\xb9\x97\x59\x3a\xac\xf7\xff\x13\xef\x01\x89\xb7\xcf\x8c\x6f\x81\xd6\xab\xb9\x13\x74\xd3\x7b\xc7\xd1\xa5\xef\x27\xc8\xa5\x45\x2f\x3f\xf4\xc4\x43\x2f\x8c\xd6\xef\x23\x74\x49\xf7\x9f\x6c\xda\xdd\xc4\xf9\x66\x9a\xfe\xb9\x3b\xc5\xbc\x94\x28\x16\xf7\x0d\xce\x44\x1c\xc3\xae\x6a\xb9\xa8\xeb\x87\x56\xbb\x89\xf5\xd7\x6a\xde\x80\xec\x2b\xff\x3e\x3d\x66\xda\x90\xbe\x16\x3e\x98\x97\xea\x71\x23\xaa\xb8\x93\x21\x6e\xfc\xb6\xb7\x99\xea\x0a\xee\xda\x56\xb3\x23\x55\xfb\x1d\x9c\x9f\xd1\x61\x13\x68\xee\x9b\x34\xbf\xdf\x5b\xa7\x87\x32\x6e\xa6\x5f\x7d\xf4\xe4\xb8\x83\x95\x6f\x40\xea\x91\xae\x65\xef\xaa\xbf\x8a\x98\xc1\x67\x9b\xa0\x6f\x2e\x2d\xcc\x27\x0e\x6d\xd2\x7c\x68\xd9\xaf\xd4\x5d\x2f\x6c\x82\xb6\x09\xee\x2c\x9a\xe8\x89\xf5\xb7\x8d\xe6\xcd\x56\x9f\x9c\xcf\xe1\x37\xd9\x2d\xab\x3a\xff\x2f\x00\x00\xff\xff\x20\xff\x55\x21\x24\x15\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 5412, mode: os.FileMode(420), modTime: time.Unix(1547910911, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mockGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xf2\x36\x14\x7d\x8e\x7f\xc5\x59\x90\x50\x42\x33\xd2\xbe\xb2\xc2\x4b\x41\x1d\x52\xd5\x56\x6a\xab\x3d\x54\x55\x9b\x91\x1b\xf0\x1a\xec\xc8\x31\xb0\x09\xf8\xef\x93\x9d\xd0\x42\x92\xb2\x8e\x97\xef\x7b\xc2\xbe\xb9\x3e\xf7\xf8\x1c\xdf\x4b\x18\xe2\x4a\xc6\x84\x29\x09\x52\x91\xa6\xf8\x37\x0c\x25\x84\xd4\x50\xb4\x8b\x41\xcf\x08\x72\x49\x6a\xa5\xb8\x26\x44\x89\x26\x05\x8a\xb9\xe6\x62\xda\x65\x2c\x8b\x26\xef\xd1\x94\x70\x89\xee\x7d\xb9\x1c\x30\xc6\xe7\x99\x54\x1a\x1e\x73\x5c\x52\x4a\xaa\xdc\x65\x3e\x63\x2c\x0c\x4d\xde\x53\x96\x91\xfa\x7d\x31\xcf\x30\xf8\x83\xeb\xd9\x78\x08\x9e\x57\xe2\x58\x71\x3d\xc3\x78\xc8\xf4\x3f\x19\x35\x9f\xc9\xb5\x5a\x4c\x34\xd6\xcc\x31\x00\x42\xe3\xed\xaf\x5c\x8a\x9e\x7b\x89\xee\x8d\x5c\x91\x7a\x10\xd1\x3b\x61\xf0\xca\xe3\x20\xd7\x8a\x8b\xa9\xfb\xc6\x9c\x4b\x74\xef\x14\x9f\x72\x11\xa5\x18\xb0\x6d\x03\xa3\x07\x52\x4b\x3e\x21\xb4\xb2\x48\xcf\x7a\x6e\x58\x81\x0b\xdd\x56\x13\xa7\xdd\xa9\x4f\x52\x71\xa4\xa3\x1c\xcf\x2f\x9d\x26\xf2\x65\xe5\x5b\x5a\x35\xc3\x5c\x29\x32\xca\x47\x10\xb4\x6a\xae\xc4\x92\x85\x98\x7c\x09\xe0\xf9\xf0\x3a\x8d\x5f\x02\x58\x3f\x7c\x43\x51\x91\x5e\x28\x81\x76\x63\xe2\x7a\x1b\x40\xf0\xb4\x64\xfa\x41\xa8\x62\x53\x4b\xc9\x85\xa6\x9e\x7b\x7f\xf7\xf0\x08\xa3\x8d\xa5\xe5\xe5\x68\xae\xee\x97\x40\xde\x4e\xd5\x12\xa6\x73\xe0\x8b\x0f\x8f\x94\xda\x23\x7a\x98\x3d\x1e\xa2\xd7\x47\x4a\xc2\xcb\xbb\x56\x65\x1f\x67\xb8\x28\x14\x37\x5f\xda\x8d\xcf\x65\xcd\x1c\x67\x3c\xec\xa1\x86\x15\x30\xe7\xf0\x59\xf4\x2c\x9d\xbd\xa4\x80\x39\x5b\xe6\x94\xc5\xd0\x47\x94\x65\x24\xe2\x5d\xf5\x00\xe6\xc7\xff\x90\xf3\x53\xb4\xa7\x2c\xde\xf5\xcf\x57\xb2\x3d\x3d\x22\x5c\xd7\x5f\xec\xf6\x1b\x4a\x16\xe8\x5e\xed\x3e\xa6\x15\xc2\x0e\x5a\x22\x9a\x53\x53\x37\xb8\x2d\x74\xc2\x00\xff\xcf\x01\x9e\xe0\x1c\x83\x7e\x5d\xbd\xcd\xa6\x1e\x1b\x1c\x9a\xb3\xd9\xa0\x5c\x3f\x57\x53\x7f\xbd\x78\x41\xbf\x6f\x24\xb3\xfe\x94\x0a\x16\x13\xa3\x7b\x4b\x2b\xcf\xe5\x31\x62\x49\xb9\x9d\x49\xf4\x37\xcf\xb5\xeb\x5b\x37\x96\xc6\xe9\x23\xb0\xcc\x59\x76\x0f\xae\x84\x7e\xd5\xd6\x06\xc7\x86\x94\xd2\x71\xc7\x86\xa3\x9b\xd1\xe3\xe8\x64\xd3\x8a\x02\x27\x9a\xf6\xf3\xbb\x72\x14\xd1\xea\x5c\xd7\xfc\x9a\xf4\x31\xc1\xaf\x47\xa7\xb7\xc8\x35\xe9\xd3\xa5\x6e\x68\x90\xda\x54\xb1\xd3\xf4\x47\x19\x22\x78\x1a\x7c\xcb\x95\x32\xff\x08\xfa\xfe\xa8\xbf\xe1\xb9\x86\x4c\xfe\xd3\x93\x6f\xe8\x6f\xa0\x3c\x99\x24\x39\xe9\x00\x29\x9f\x73\x6d\xd4\xaf\x69\xfb\xe5\xdf\x64\x55\x5e\x99\x24\xa6\xed\xcf\x99\x93\xf2\x79\xb9\x4a\xa4\xc2\x6b\x00\x3b\x0f\x54\x24\xa6\xb4\xbb\xa7\x95\x8a\x27\x58\xe2\x97\x4f\xe9\x4c\xa0\x20\x64\xa2\xe7\x68\xb7\x61\xf6\x66\x53\x86\x6d\x96\xa9\x74\x76\x66\x57\x13\x29\x34\x17\x0b\x32\x9b\x6d\x89\x50\x5c\xa5\x6f\x00\x36\x1b\xb3\x33\xe7\x6d\xb0\x38\x9d\xf2\x79\x79\xba\x7a\xd1\x8f\x3f\x8f\xca\x87\x00\x4b\xdf\x1e\x28\xd0\x0d\x76\x51\xa4\x00\x74\xfe\x54\x14\xbd\xdb\xe5\xb6\x91\xd5\x76\xdf\xe8\x1a\x76\x61\xee\xbf\x01\x00\x00\xff\xff\x2f\xd6\x95\x71\xed\x09\x00\x00"

func mockGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mockGoTpl,
		"mock.go.tpl",
	)
}

func mockGoTpl() (*asset, error) {
	bytes, err := mockGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock.go.tpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1546799589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
	"mock.go.tpl": mockGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
	"mock.go.tpl": &bintree{mockGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

