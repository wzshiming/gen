// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// mock.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xdb\x36\x10\xfe\x6c\xfd\x8a\xab\x52\x04\x52\x6a\xc8\xd9\x57\xad\x0e\x30\xc4\x6e\x67\x2c\x48\x8a\x26\xc5\x80\x15\x45\xab\x97\xb3\xc3\x56\x22\x5d\x8a\xae\x57\xb8\xfe\xef\x03\x5f\x64\xd1\x94\xfc\xd2\x24\xc0\xf6\x61\xf9\xe4\xf0\xc8\xbb\xe3\xf3\x3c\x47\xf2\x34\x18\xc0\x25\xcb\x11\x66\x48\x91\x27\x02\xf3\x5f\x61\xc4\x80\x32\x01\x1c\xeb\x31\x10\xf7\x08\xec\x1b\xf2\x25\x27\x02\x21\x99\x0a\xe4\x80\x39\x11\x84\xce\x22\xcf\x9b\x27\xd9\x97\x64\x86\xf0\x12\xa2\x37\xe6\xe7\x85\xe7\x91\x72\xce\xb8\x80\xc0\xeb\xf9\x82\x94\xe8\x7b\x5e\xcf\x9f\x11\x71\xbf\x48\xa3\x8c\x95\x83\x59\xc1\xd2\xa4\xa8\xc8\x8c\x0e\xca\x19\xf3\xf7\x19\x07\x69\xc5\xa8\xef\x85\x9e\x37\x18\xc8\x20\xef\xe6\x73\xe4\xbf\x2f\xca\x39\x5c\xfc\x49\xc4\xfd\x64\x04\xa4\x72\xc6\x61\x49\xc4\x3d\x4c\x46\x9e\xf8\x3e\xc7\xee\x35\x95\xe0\x8b\x4c\xc0\xca\xeb\x4d\x46\x20\x23\x44\x37\xe9\x67\xcc\xc4\x24\x07\xf9\xf7\x49\x0e\xc5\xfe\x47\x92\xf7\x59\x49\x04\x96\x73\xf1\xdd\x87\xcf\x6a\xf0\x25\x44\x57\x6c\x89\xfc\x96\x26\x5f\x10\x2e\x3e\x92\xdc\xff\xe4\xf5\x9c\x0c\xc0\x76\xd3\x27\xb4\x20\x14\xe5\xb4\x4b\x8e\x89\xc0\x3b\x52\x22\x48\x5c\x22\xf5\xcb\x4c\xcb\x94\xed\xa3\x1c\x6f\x47\xb5\x8c\xd2\xcf\xbb\x79\xbe\xd3\xcf\x42\xd9\x76\xf8\xb1\x8c\xfe\x27\x6f\xed\x75\x61\xf4\x16\x33\xc6\xf3\x6d\x8c\x9c\x3f\x17\xb2\x9f\x01\x8c\x2b\xf7\x9d\xb8\xc9\x40\x3b\x5c\xb7\x61\x3f\x96\x9a\xb7\x98\x21\x15\x76\xf6\x67\x0e\x5b\x26\x04\x57\x13\xdb\x6e\xf5\xb8\xa2\x6f\xc1\xf9\xb6\xaf\x1d\xae\x32\x3d\xb1\x83\x47\x6d\x68\xf2\x52\xcc\x99\xbf\x86\xca\x2d\xfd\xe8\xf8\x3b\x08\xb5\x8c\x56\x86\x96\x93\x1d\x4e\x4d\x22\xbb\xe4\x66\x59\xa5\x5b\xb9\xbe\xda\x52\x00\xd9\x86\xb4\x76\x2b\x17\x54\x6d\x7f\x6a\x58\x0b\xae\x55\xc6\xb7\xc8\xbf\x91\x0c\xe1\x64\x9e\x88\xfb\xd8\x1f\x38\x2c\x0e\xfc\x93\x2e\x91\xd6\xab\x1a\x95\xe6\x69\xcd\x49\x39\x63\xd1\x25\x2b\x0a\xcc\x04\x61\x54\x5a\x8c\xa4\x5d\x8b\x4e\xe7\x1a\x97\xdd\xbe\x75\xb5\x42\x02\x14\x97\xdd\xe1\xbd\xe9\x82\x66\x3b\x1d\x04\x79\xea\x86\x0c\x21\x38\xeb\x9c\xdb\x07\xe4\x9c\xf1\x50\xef\xc4\xe4\x1b\x0f\x21\x4f\xa3\x51\x22\x92\x34\xa9\x30\xba\x0c\xf2\x34\xba\x4e\x4a\x84\x17\xe0\x9b\x3a\xf2\xc3\x66\x7e\x34\xa6\xd5\x82\xe3\x84\xe6\xf8\x77\x20\xe3\xaa\x5f\xab\x3f\xf0\x7b\x0c\xef\x3f\x54\x82\x13\x3a\x5b\x75\x55\xc9\x7a\x1d\x7a\x3d\x8e\x62\xc1\x29\x9c\x76\xa6\xb7\xf2\x7a\xbd\x3c\x8d\x0d\xc2\x79\xda\x57\xff\xeb\xb0\x31\xd4\xbf\xfa\x5e\x6f\xdd\x07\x4a\x0a\x83\xec\x06\x40\xa7\x4a\x4e\x38\x5b\x08\x8c\xfd\x37\x37\xb7\x77\x20\x09\x56\x30\x06\x95\x5b\x4e\x26\x78\x68\x1c\x05\x75\xea\xc6\x8d\x33\x3b\x04\x67\x42\xeb\x6c\x1f\x9c\xc1\x09\x4d\x4a\xec\x3c\x2a\x4e\xe0\x6c\xa0\x58\xb0\x98\x68\xf9\x1b\x6a\x8f\xd7\xb8\xac\x9d\x06\xa1\xd7\xa3\x6c\x29\xb9\xd2\x26\xb6\x94\x43\xd2\xcf\x10\xaa\x28\x4f\xa3\x09\xad\x90\x8b\xe0\xb4\xf3\x26\x92\xc0\x4e\x46\x31\xb8\x91\x24\xc0\x2f\x21\xba\xe1\x64\x46\x68\x52\xc0\x45\xac\xb6\x6b\xcd\x91\x33\x9a\xfb\x24\x06\xca\x96\x72\xa8\xb9\x1a\xea\x21\x49\x2e\x99\xaa\x9d\x3d\x1b\x4a\x76\x54\x50\x43\xb7\xef\xab\x3d\x7b\xbd\xf5\x46\x01\xad\x54\x2c\x46\xb5\x77\xf5\x26\xd8\xc5\xe9\xbb\x3b\x18\xac\xda\xf8\xae\x8f\xa0\x59\x7b\x7f\x02\x16\x0f\x0a\x65\x9b\x66\x73\xf2\x2b\x88\x62\xc9\xda\x6b\x14\xad\x2c\x3a\x51\x34\x23\xc3\x21\xc8\x7a\x1b\x73\x7e\xcd\xc4\x2b\xb6\xa0\xb9\xb2\xd6\x88\x4a\xfc\x7a\x12\xe1\x7a\xc0\x20\xbe\x25\x13\xbd\xf9\x49\xde\x0a\xdc\xd7\xfb\x1f\xad\x56\xfe\xf3\x0a\x85\xdf\x77\x6b\x54\x4b\x69\xa5\x15\x63\x8d\xc7\xe6\x82\x72\x44\x63\x2b\xa4\x91\xac\x14\xca\x7a\xaf\x54\x36\x49\xd7\xb7\xdb\xbf\x88\x97\x3e\xfc\x82\x9a\xb8\x53\x93\x52\xe4\x10\x7d\xcc\x6e\xac\x98\x5a\xe3\x23\x2c\x70\xbf\xc6\x47\xe3\xab\xf1\xdd\xf8\xc1\x32\xd7\x01\x1e\x2d\xf3\xff\xa6\x8c\xdf\x62\xc9\xbe\x75\xc9\xf8\x28\x32\x76\xf0\x4b\x49\xf1\x30\x2e\x5f\xa3\xd8\x47\xe4\xeb\xf1\xc3\x0f\xab\x2e\x70\x1f\x40\xe1\xfe\xa3\x4a\x97\xb6\x7b\x2d\x7d\xd5\xf4\xe6\x69\xf4\x8a\xd0\xbc\x1b\x6b\x8d\xe4\xd7\xe8\x86\xa2\xba\x7a\x2c\xfb\x3e\x28\x29\x29\x0e\x5c\x08\xf6\x75\x70\x45\x2a\x01\x6c\x7a\x10\xe2\x23\xe0\x94\xae\x82\x4a\x24\x5c\x3f\x5e\x1b\xe8\xd4\x98\x7e\x89\x9a\x2b\x9a\xe6\x4e\xe7\xd3\x4c\x46\x9a\xdb\x53\xd9\x74\x5a\xa1\xe8\x43\x41\x4a\x22\xe4\x9b\xb5\x05\x78\x05\xef\x3f\x1c\x85\x79\xb9\xb9\xe1\x47\xab\xb5\x02\xf0\xd9\x26\xdb\x68\x52\xfd\x85\x9c\x05\x21\xfc\xf8\x01\xcf\x4c\x7e\xcd\xa0\x84\xb7\x3c\xdf\x5e\xbf\xcb\x81\xaa\xb7\xf2\x1c\x86\x90\xcc\xe7\x48\xf3\xa0\x3c\xaf\xcf\x7f\x96\x8d\x0b\x2c\x57\xfe\xf3\x99\x40\xbf\x0f\x9b\xc5\xf2\xd0\xee\xd5\x2e\x3b\x83\x1f\x72\x58\xc8\x4b\xc5\xac\xdc\x78\x2b\xad\x25\xee\x0a\xbb\x1d\xed\x43\x79\x2e\x17\xad\x5d\x5d\x06\x65\x18\xdd\x7e\x21\xf3\x40\xb3\x10\x46\x57\x92\x85\x40\x71\x61\x09\xf4\xb7\xa2\x70\x05\x5a\x3d\x4e\xa1\xd5\xd6\x1b\x94\x2d\xe8\x51\x1a\xcd\xe4\xc4\x63\xde\xa2\x72\xde\x13\x2b\x35\x84\x40\x85\x97\x12\xfd\x5f\x78\x4f\x20\xbc\x8d\x32\xbe\x46\x9a\xaf\xd0\xc8\x41\x37\x2a\x7b\xce\x2d\x7d\xf3\x40\x21\x67\x6c\xe9\x43\x1b\x1e\x7a\x5b\x34\x71\x9f\xe0\x79\x7b\xf8\x58\xd3\xe1\x3a\x0e\x37\xd3\xa8\xed\xd1\x58\x67\x87\xe8\x3e\xa9\x27\xa3\xb5\x0d\xbb\xe9\x3f\x1f\x57\xf5\x26\xe7\xc7\xd5\xbe\x71\x62\x9f\x00\x7a\x68\xdf\x39\x60\x38\xd7\x25\x78\x2c\xe9\x47\x1f\x18\x56\xfc\xa7\x78\x30\x1c\x75\x50\x3c\x9e\xc4\xee\x0a\x3a\xb4\x57\xf3\x6e\x3b\xee\x51\x63\x1e\xed\xed\xf6\x4c\xed\x49\x6e\x89\x4c\xdd\x56\x6e\xd8\xa5\x09\x25\x07\x85\x8b\xf5\xf8\xdd\xde\xd0\xcf\xe0\x12\x49\x60\xc2\xcd\xb6\x0f\xbe\x3b\x7b\x7c\xf3\xb9\xe6\xb4\xab\xda\xda\x9d\x59\xbb\xe3\x8f\x74\xcb\x6f\xbe\xdf\xc5\xcd\x87\xb5\xba\xd9\x6a\x8c\xba\x73\x6b\xbe\xc3\xd6\xed\x9b\xfe\x4a\x17\xdb\x5f\xe5\xb4\x56\x5e\xc0\x2f\xd2\xac\x3f\x38\xda\x76\xa7\x00\x9d\xee\xa9\x59\x63\x45\x74\xd3\x6e\x9a\xc9\xbe\x5d\x94\x16\xfc\xe6\xf3\x87\xc6\x48\x89\xe8\x9f\x00\x00\x00\xff\xff\xa5\xa9\xb6\xbf\x77\x18\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 6263, mode: os.FileMode(420), modTime: time.Unix(1551715635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mockGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xf2\x36\x14\x7d\x8e\x7f\xc5\x59\x90\x50\x42\x33\xd2\xbe\xb2\xc2\x4b\x41\x1d\x52\xd5\x56\x6a\xab\x3d\x54\x55\x9b\x91\x1b\xf0\x1a\xec\xc8\x31\xb0\x09\xf8\xef\x93\x9d\xd0\x42\x92\xb2\x8e\x97\xef\x7b\xc2\xbe\xb9\x3e\xf7\xf8\x1c\xdf\x4b\x18\xe2\x4a\xc6\x84\x29\x09\x52\x91\xa6\xf8\x37\x0c\x25\x84\xd4\x50\xb4\x8b\x41\xcf\x08\x72\x49\x6a\xa5\xb8\x26\x44\x89\x26\x05\x8a\xb9\xe6\x62\xda\x65\x2c\x8b\x26\xef\xd1\x94\x70\x89\xee\x7d\xb9\x1c\x30\xc6\xe7\x99\x54\x1a\x1e\x73\x5c\x52\x4a\xaa\xdc\x65\x3e\x63\x61\x68\xd2\x9e\xb2\x8c\xd4\xef\x8b\x79\x86\xc1\x1f\x5c\xcf\xc6\x43\xf0\xbc\x12\xc7\x8a\xeb\x19\xc6\x43\xa6\xff\xc9\xa8\xf9\x4c\xae\xd5\x62\xa2\xb1\x66\x8e\x01\x10\x1a\x6f\x7f\xe5\x52\xf4\xdc\x4b\x74\x6f\xe4\x8a\xd4\x83\x88\xde\x09\x83\x57\x1e\x07\xb9\x56\x5c\x4c\xdd\x37\xe6\x5c\xa2\x7b\xa7\xf8\x94\x8b\x28\xc5\x80\x6d\x1b\x18\x3d\x90\x5a\xf2\x09\xa1\x95\x45\x7a\xd6\x73\xc3\x0a\x5c\xe8\xb6\x9a\x38\xed\x4e\x7d\x92\x8a\x23\x1d\xe5\x78\x7e\xe9\x34\x91\x2f\x2b\xdf\xd2\xaa\x19\xe6\x4a\x91\x11\x3e\x82\xa0\x55\x73\x25\x96\x2c\xc4\xe4\x4b\x00\xcf\x87\xd7\x69\xfc\x12\xc0\xda\xe1\x1b\x8a\x8a\xf4\x42\x09\xb4\x1b\x13\xd7\xdb\x00\x82\xa7\x25\xd3\x0f\x42\x15\x9b\x5a\x4a\x2e\x34\xf5\xdc\xfb\xbb\x87\x47\x18\x6d\x2c\x2d\x2f\x47\x73\x75\xbf\x04\xf2\x76\xaa\x96\x30\x9d\x03\x5f\x7c\x78\xa4\xd4\x1e\xd1\xc3\xec\xf1\x10\xbd\x3e\x52\x12\x5e\xde\xb5\x2a\xfb\x38\xc3\x45\xa1\xb8\xf9\xd2\x6e\x7c\x2e\x6b\xe6\x38\xe3\x61\x0f\x35\xac\x80\x39\x87\xcf\xa2\x67\xe9\xec\x25\x05\xcc\xd9\x32\xa7\x2c\x86\x3e\xa2\x2c\x23\x11\xef\xaa\x07\x30\x3f\xfe\x87\x9c\x9f\xa2\x3d\x65\xf1\xae\x7d\xbe\x92\xed\xe9\x11\xe1\xba\xfe\x62\xb7\xdf\x50\xb2\x40\xf7\x6a\xf7\x31\xad\x10\x76\xd0\x12\xd1\x9c\x9a\xba\xc1\x6d\xa1\x13\x06\xf8\x7f\x0e\xf0\x04\xe7\x18\xf4\xeb\xea\x6d\x36\xf5\xd8\xe0\xd0\x9c\xcd\x06\xe5\xfa\xb9\x9a\xfa\xeb\xc5\x0b\xfa\x7d\x23\x99\xf5\xa7\x54\xb0\x18\x18\xdd\x5b\x5a\x79\x2e\x8f\x11\x4b\xca\xed\x48\xa2\xbf\x79\xae\x5d\xdf\xba\xb1\x34\x4e\x1f\x81\x65\xce\xb2\x7b\x70\x25\xf4\xab\xb6\x36\x38\x36\xa4\x94\x8e\x3b\x36\x1c\xdd\x8c\x1e\x47\x27\x9b\x56\x14\x38\xd1\xb4\x9f\xdf\x95\xa3\x88\x56\xe7\xba\xe6\xd7\xa4\x8f\x09\x7e\x3d\x3a\xbd\x45\xae\x49\x9f\x2e\x75\x43\x83\xd4\xa6\x8a\x9d\xa6\x3f\xca\x10\xc1\xd3\xe0\x5b\xae\x94\xf9\x47\xd0\xf7\x47\xfd\x0d\xcf\x35\x64\xf2\x9f\x9e\x7c\x43\x7f\x03\xe5\xc9\x24\xc9\x49\x07\x48\xf9\x9c\x6b\xa3\x7e\x4d\xdb\x2f\xff\x26\xab\xf2\xca\x24\x31\x6d\x7f\xce\x9c\x94\xcf\xcb\x55\x22\x15\x5e\x03\xd8\x79\xa0\x22\x31\xa5\xdd\x3d\xad\x54\x3c\xc1\x12\xbf\x7c\x4a\x67\x02\x05\x21\x13\x3d\x47\xbb\x0d\xb3\x37\x9b\x32\x6c\xb3\x4c\xa5\xb3\x33\xbb\x9a\x48\xa1\xb9\x58\x90\xd9\x6c\x4b\x84\xe2\x2a\x7d\x03\xb0\xd9\x98\x9d\x39\x6f\x83\xc5\xe9\x94\xcf\xcb\xd3\xd5\x8b\x7e\xfc\x79\x54\x3e\x04\x58\xfa\xf6\x40\x81\x6e\xb0\x8b\x22\x05\xa0\xf3\xa7\xa2\xe8\xdd\x2e\xb7\x8d\xac\xb6\xfb\x46\xd7\xb0\x0b\x73\xff\x0d\x00\x00\xff\xff\x9d\xbf\x62\x7e\xec\x09\x00\x00"

func mockGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mockGoTpl,
		"mock.go.tpl",
	)
}

func mockGoTpl() (*asset, error) {
	bytes, err := mockGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock.go.tpl", size: 2540, mode: os.FileMode(420), modTime: time.Unix(1551715621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
	"mock.go.tpl": mockGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
	"mock.go.tpl": &bintree{mockGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

