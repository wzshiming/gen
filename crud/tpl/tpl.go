// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// mgo_record.go.tpl
// mock.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4f\x6f\xda\x40\x10\xc5\xcf\xec\xa7\x98\x9a\x2a\xb2\x11\xb2\xef\x34\x41\xaa\x62\x9a\x22\xa1\x12\x95\x44\x3d\x54\x55\xe2\x3f\x83\x99\xc4\xde\x75\x76\x87\xa0\x08\xf1\xdd\x2b\x1b\x3b\x4d\x6c\x87\x46\xe4\x06\x6b\xcf\x7b\x6f\x7e\x3b\x63\xcf\x83\x73\x15\x23\x24\x28\x51\x07\x8c\xf1\x17\xf0\x15\x48\xc5\xa0\xb1\x3e\x03\x5e\x21\xa8\x47\xd4\x1b\x4d\x8c\x10\x2c\x19\x35\x60\x4c\x4c\x32\x71\x85\xc8\x83\xe8\x3e\x48\x10\x4e\xc1\xbd\xac\x7e\x8e\x85\xa0\x2c\x57\x9a\xc1\x16\x3d\x2b\x21\x5e\xad\x43\x37\x52\x99\x97\xa4\x2a\x0c\x52\x43\x89\xf4\xb2\x44\x59\x87\x1e\x7a\xa1\x51\xd2\x12\x8e\x10\x9e\x57\x68\x5f\xe7\x39\xea\xef\xeb\x2c\x87\xf1\x2f\xe2\xd5\xd4\x07\x32\x8d\x73\xd8\x10\xaf\x60\xea\x0b\x7e\xca\xb1\xbb\xc6\xb0\x5e\x47\x0c\x5b\xd1\x9b\xfa\x50\x38\xb8\xf3\xf0\x0e\x23\x9e\xc6\x70\x5b\xfc\x1d\x59\x37\x14\x0f\x55\x46\x8c\x59\xce\x4f\x16\xdc\x95\x87\xa7\xe0\xce\xd4\x06\xf5\x42\x06\xf7\x08\xe3\x1b\x8a\xad\x5b\xd1\x3b\x05\x77\xae\x29\x21\x19\xa4\x30\xae\xeb\x87\x24\x53\x92\x68\xdd\x8a\x5d\x47\xf4\x05\xea\x47\x8a\x10\xfa\x79\xc0\xab\x91\xe5\x35\x84\x3d\xab\xdf\x15\xbe\xae\xfa\x97\x3e\x0e\x61\x90\x25\xca\x3d\x57\x69\x8a\x11\x93\x92\x95\xdd\x0f\xdc\x74\xd7\x9e\x6b\x2c\xee\x32\x00\x89\x9b\x6e\x79\xb1\x5c\xcb\xe8\x4d\x01\xbb\x6d\xe9\x80\x3d\xe8\x7c\x77\x08\xa8\xb5\xd2\x4e\x91\x54\x23\xaf\xb5\x84\x93\xce\x17\xb7\x71\xb8\x1b\x82\xa4\xb4\x4a\xff\x1c\xb2\x71\xb1\x7d\xad\xd6\x8c\x23\xeb\x72\xbe\xb8\x82\x02\x52\x19\xd5\x36\xd0\xed\xef\x54\x42\x76\x8d\xb7\x92\x19\xbc\xba\x31\x07\x6c\xd4\xba\x1d\x15\x8c\x1b\x87\xee\x54\x1a\xd4\xdc\x50\x70\xaa\x9c\xd7\x79\x5c\x2f\xc6\x5b\x49\xaf\xaf\xc0\xdb\xb6\xe7\x66\xf7\x8e\xf0\x7b\xf5\x86\x75\x6b\x5e\xbd\x01\xf4\x65\x90\x61\xe7\x74\xf6\x61\xe0\x0d\xe1\xa8\xf6\xcb\xee\xf7\x11\xa6\x71\x2b\xc4\x70\x9f\xc2\xdf\x6e\xad\xcf\x06\xd9\x6a\x9a\xec\x76\x35\x23\x1f\x53\x3c\xcc\xc8\x9f\xcc\x26\x57\x93\xa3\x31\xed\x0d\x3e\x8c\xe9\x20\x87\x9f\x98\xa9\xc7\x2e\x0e\x75\x97\x17\xc8\x87\x5a\xbc\x98\x1c\x3f\x06\x17\xd8\x1c\xbf\xa3\x9a\xeb\x18\x82\xd6\x77\xb1\x5c\xd8\x17\x08\x1e\x60\x74\xb6\x07\xf0\x8d\x64\xdc\xd9\x7e\xaf\xa8\x38\x83\x07\x77\x2e\xd1\x3e\x69\xae\x49\x8f\x96\xa5\xe4\xa7\xb3\x62\xbb\x0b\xc9\x1a\xab\xa4\xb4\x74\x13\xbd\xdd\x33\xea\xd7\xd5\x2f\x3f\x08\x33\x32\x0c\x6a\xf9\x5f\xc4\xef\xc0\x59\x48\xd9\x6a\xb9\x34\xc8\x43\x48\x29\x23\x06\x92\xdc\x02\x64\xe0\xf7\x9f\x23\x18\xd9\x92\x52\xc7\x5d\xdc\x53\x5e\x79\x38\xee\xac\xf0\xb0\x4b\xa7\x17\xb8\xbe\xa6\x69\x13\x97\xf9\x18\x2f\x53\x03\xfb\x1b\x00\x00\xff\xff\xd8\x2e\x11\x0f\xcd\x07\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 1997, mode: os.FileMode(420), modTime: time.Unix(1547709884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mgo_recordGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdb\x6e\xe3\x36\x10\x7d\x36\xbf\x62\xaa\x14\x0b\x29\x2b\x50\xe8\xab\x77\x13\xa0\xb0\xdd\xd4\x68\x90\x2c\x72\x41\x1f\x16\x8b\x44\x97\xb1\xcd\x8d\x44\x7a\x29\xda\x6e\x60\xf8\xdf\x0b\x8a\x94\xad\x9b\x9d\xc4\x89\x9e\x24\x72\x78\x66\xe6\x9c\xe1\x90\x0a\x02\x18\x88\x04\x61\x8a\x1c\x65\xa8\x30\xf9\x02\x43\x01\x5c\x28\x90\x58\x8e\x81\x9a\x21\x88\x25\xca\x95\x64\x0a\x21\x9c\x28\x94\x80\x09\x53\x8c\x4f\x29\x21\xf3\x30\x7e\x0a\xa7\x08\x5f\x81\x7e\xb3\xaf\xe7\x84\xb0\x6c\x2e\xa4\x02\x97\xf4\x1c\xc5\x32\x74\x08\xe9\x39\x53\xa6\x66\x8b\x88\xc6\x22\x0b\xa6\xa9\x88\xc2\x34\x67\x53\x1e\x64\x53\xe1\x1c\x9a\x0c\xa2\x5c\x70\x87\x78\x84\x04\x81\x76\x72\x3f\x9f\xa3\xfc\x7b\x91\xcd\xe1\xfc\x5f\xa6\x66\xe3\x21\xb0\xbc\x31\x0e\x2b\xa6\x66\x30\x1e\x12\xf5\x3c\xc7\xee\x35\xb9\x92\x8b\x58\xc1\x9a\xf4\xc6\x43\xd0\x1e\xe8\x75\xf4\x13\x63\x35\x4e\xe0\x51\x7f\xf6\x9d\x07\x96\xf8\x22\x63\x0a\xb3\xb9\x7a\x76\xe0\x67\x31\xf8\x15\xe8\xa5\x58\xa1\xbc\xe5\xe1\x13\xc2\xf9\x03\x4b\x9c\x47\xd2\x6b\x78\x87\x12\xc2\x67\x3c\x65\x1c\xb5\xc9\xfd\x3c\x29\xa8\x64\x19\xd2\x3b\x96\x61\x69\xb2\x28\xc6\xdb\x8e\xcc\xb8\xf3\x48\x36\xa4\x2b\x8b\x1b\x8c\x85\x4c\xea\x59\x34\x9e\x7a\x52\xf0\xa6\xb4\x64\x01\xdf\x99\x9d\x76\xb4\x07\xba\x4d\xce\x6b\x09\xbc\xc1\x18\xb9\xaa\x46\x7f\xda\xe0\xd4\xba\x90\x85\x61\x1b\xd6\x8c\x6b\xa8\xc1\x42\xca\x3a\xd6\x1e\xa8\xd8\x18\xb6\xb1\xec\xc4\x2e\xae\x42\x2f\xfb\xec\x04\x34\x4f\x2d\xae\x07\x3d\xbb\x2f\xb8\x62\xb2\x12\x61\x05\x64\x0f\xa8\x0d\x64\x0f\x6a\x75\x56\xc3\xea\xf5\x79\xad\x02\x58\x9d\xd2\x12\x56\x2f\xc8\xdb\x78\xc5\xb0\x29\xb8\xd6\x46\xbb\x45\xb9\x64\x31\xc2\xc9\x3c\x54\xb3\xbe\x13\x34\x54\x0c\x9c\x93\xae\x22\x2d\x57\xed\xaa\x34\x89\x4a\x4d\xb2\xa9\xa0\x03\x91\xa6\x18\x2b\x26\xb8\x9e\xb1\x25\xdd\x9c\x31\xe1\x5c\xe1\xaa\x1b\x7b\x20\x51\xef\xab\x10\x38\xae\xba\xdd\x93\xc9\x82\xc7\x7b\x01\xdc\x24\x6a\xba\xf4\xc0\x3d\xed\xb4\xf5\x01\xa5\x14\xd2\x33\x99\xd8\x78\xfb\x67\x90\x44\x74\x18\xaa\x30\x0a\x73\xa4\x03\x37\x89\xe8\x55\x98\x21\x7c\x06\xc7\xee\x23\xc7\xdb\xd9\xd3\x11\xcf\x17\x12\xc7\x3c\xc1\xff\x5c\xed\xb7\x78\x5b\xff\x83\xcf\x7d\xf8\xfe\x23\x57\x92\xf1\xe9\xba\x6b\x97\x6c\x36\x1e\xe9\x49\x54\x0b\xc9\xe1\x53\x67\x78\x6b\xd2\xeb\x25\x51\xdf\x32\x9c\x44\x7e\xf1\x6d\xdc\xf6\xa1\x7c\xf3\x49\x6f\xe3\x03\x67\xa9\x65\x76\x4b\x60\x63\x97\x9c\x48\xb1\x50\xd8\x77\xbe\x5d\xdf\xde\x81\x16\xb8\xa0\xd1\xcd\x9b\xdb\xc9\x3a\xf7\x2c\x90\x5b\x86\x6e\x61\x1a\xd6\x1e\xb8\x28\x65\x85\x47\x9b\x51\x4e\x93\x88\x8e\x79\x8e\x52\xb9\x9f\xba\x1a\xb6\x4e\xae\x3e\xde\xb7\x5b\xbb\xe2\x4d\x67\x6c\x1a\x6d\xdf\xf4\xa8\x2b\xb1\x72\x3d\x9d\xb1\x67\xb3\x2d\xdb\xf0\xac\x59\xab\xbb\x7c\xef\xef\x20\x58\xb7\x05\xd8\xbc\x82\x02\x83\xde\xa0\xa0\x75\xbe\x04\xa7\x70\xc2\xc3\x0c\x3b\x9b\xe1\x09\x9c\x06\x3e\xbc\x91\x44\x36\xd1\x1f\xba\x14\x73\x6a\x4a\xae\x15\x43\x13\xd3\xfb\x52\x2c\xf9\xed\x4c\x97\x82\xc6\x28\x95\x40\x29\x49\x6f\x43\xea\xca\x98\xc4\xc6\x5d\xb0\x45\x6e\xc3\xf5\xda\xf9\x3d\x47\xe5\xf8\xcd\xda\xfc\x10\xf5\x36\x5b\xfd\x86\x98\xe2\x61\xfd\x86\xa3\xcb\xd1\xdd\xe8\x68\x09\x8d\x83\x77\x4b\x78\x9c\x44\x9c\xa5\x6f\xd3\xe5\x06\x33\xb1\xec\xd2\xa5\xe4\xeb\x02\xd5\x21\xb2\x2e\x46\xc7\x17\xfb\x05\xaa\x8f\xa0\xe9\x70\xa9\x9b\xf2\x29\x1a\x6f\x85\xcc\x5f\x86\xc7\x24\xa2\x7f\x31\x9e\x74\xa6\xdf\xd3\x2b\xce\xe0\x17\xbd\xe6\x58\x74\x94\x6a\xed\x6f\xe5\x68\xd3\xcc\x59\xea\x97\x5c\x97\x63\x8d\x32\xad\x34\xcf\x4b\x96\x2b\x10\x93\x17\x29\x7e\x05\x9d\x1a\xca\x15\x93\x49\x8e\xca\x87\x94\x65\x4c\xe9\xf3\xbb\x45\x50\x0e\xdf\x7f\x1c\xc1\x91\xab\x4b\x8b\xde\x3e\xb1\xb9\xf5\xe1\xd1\x4b\xed\xc3\x2d\x3c\x55\xe8\xfa\x33\x4d\x9b\x74\xe5\xef\xe3\x2b\xaf\x12\x66\xce\xa0\x03\xb4\x99\xbd\x01\xa9\xb6\xa8\x51\x68\x26\x8e\x2d\xd6\x9d\xdf\x0f\xe8\xce\x2f\xab\x64\xdc\x75\x68\x65\xcf\xe0\x7d\x5a\xd9\x3b\x42\xa1\xd8\xb6\xb1\x76\xc4\xd1\xec\xe6\xe3\xe1\x66\x73\xac\xbc\x36\xd6\xf7\x89\x6c\x41\xb6\x52\xbf\xa4\xc7\x9e\x16\x58\xd7\xc2\x07\x7b\xc7\x6d\x1f\x80\x05\x77\x3a\xc4\xa5\xbf\xeb\xab\x5d\x1d\xe9\x50\x5a\x65\x46\xb1\x58\x70\x55\xc1\x79\x8b\x0e\x4b\x6a\xb8\x1f\x68\x0c\xf7\x35\xde\x2a\xfd\xdb\xba\xe9\xbe\xf7\x98\xc9\xf6\xc9\x39\x1e\xda\x2b\x9e\x76\xad\xcf\x4c\xf3\x93\x62\x07\x3f\x2d\x69\xdd\x5c\x5b\xd8\x3f\x0e\x63\x52\xfe\xf7\x6c\x57\xea\x1f\x87\xbe\x86\x33\x87\x6f\x65\x81\x99\xa9\x9d\xc5\xe6\x37\xa3\xbc\x64\x16\xcc\xc1\x67\xf8\x63\x7b\xc7\xfa\x3f\x00\x00\xff\xff\x96\xa1\x20\xa3\x51\x10\x00\x00"

func mgo_recordGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgo_recordGoTpl,
		"mgo_record.go.tpl",
	)
}

func mgo_recordGoTpl() (*asset, error) {
	bytes, err := mgo_recordGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo_record.go.tpl", size: 4177, mode: os.FileMode(420), modTime: time.Unix(1547709927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mockGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xf2\x36\x14\x7d\x8e\x7f\xc5\x59\x90\x50\x42\x33\xd2\xbe\xb2\xc2\x4b\x41\x1d\x52\xd5\x56\x6a\xab\x3d\x54\x55\x9b\x91\x1b\xf0\x1a\xec\xc8\x31\xb0\x09\xf8\xef\x93\x9d\xd0\x42\x92\xb2\x8e\x97\xef\x7b\xc2\xbe\xb9\x3e\xf7\xf8\x1c\xdf\x4b\x18\xe2\x4a\xc6\x84\x29\x09\x52\x91\xa6\xf8\x37\x0c\x25\x84\xd4\x50\xb4\x8b\x41\xcf\x08\x72\x49\x6a\xa5\xb8\x26\x44\x89\x26\x05\x8a\xb9\xe6\x62\xda\x65\x2c\x8b\x26\xef\xd1\x94\x70\x89\xee\x7d\xb9\x1c\x30\xc6\xe7\x99\x54\x1a\x1e\x73\x5c\x52\x4a\xaa\xdc\x65\x3e\x63\x2c\x0c\x4d\xde\x53\x96\x91\xfa\x7d\x31\xcf\x30\xf8\x83\xeb\xd9\x78\x08\x9e\x57\xe2\x58\x71\x3d\xc3\x78\xc8\xf4\x3f\x19\x35\x9f\xc9\xb5\x5a\x4c\x34\xd6\xcc\x31\x00\x42\xe3\xed\xaf\x5c\x8a\x9e\x7b\x89\xee\x8d\x5c\x91\x7a\x10\xd1\x3b\x61\xf0\xca\xe3\x20\xd7\x8a\x8b\xa9\xfb\xc6\x9c\x4b\x74\xef\x14\x9f\x72\x11\xa5\x18\xb0\x6d\x03\xa3\x07\x52\x4b\x3e\x21\xb4\xb2\x48\xcf\x7a\x6e\x58\x81\x0b\xdd\x56\x13\xa7\xdd\xa9\x4f\x52\x71\xa4\xa3\x1c\xcf\x2f\x9d\x26\xf2\x65\xe5\x5b\x5a\x35\xc3\x5c\x29\x32\xca\x47\x10\xb4\x6a\xae\xc4\x92\x85\x98\x7c\x09\xe0\xf9\xf0\x3a\x8d\x5f\x02\x58\x3f\x7c\x43\x51\x91\x5e\x28\x81\x76\x63\xe2\x7a\x1b\x40\xf0\xb4\x64\xfa\x41\xa8\x62\x53\x4b\xc9\x85\xa6\x9e\x7b\x7f\xf7\xf0\x08\xa3\x8d\xa5\xe5\xe5\x68\xae\xee\x97\x40\xde\x4e\xd5\x12\xa6\x73\xe0\x8b\x0f\x8f\x94\xda\x23\x7a\x98\x3d\x1e\xa2\xd7\x47\x4a\xc2\xcb\xbb\x56\x65\x1f\x67\xb8\x28\x14\x37\x5f\xda\x8d\xcf\x65\xcd\x1c\x67\x3c\xec\xa1\x86\x15\x30\xe7\xf0\x59\xf4\x2c\x9d\xbd\xa4\x80\x39\x5b\xe6\x94\xc5\xd0\x47\x94\x65\x24\xe2\x5d\xf5\x00\xe6\xc7\xff\x90\xf3\x53\xb4\xa7\x2c\xde\xf5\xcf\x57\xb2\x3d\x3d\x22\x5c\xd7\x5f\xec\xf6\x1b\x4a\x16\xe8\x5e\xed\x3e\xa6\x15\xc2\x0e\x5a\x22\x9a\x53\x53\x37\xb8\x2d\x74\xc2\x00\xff\xcf\x01\x9e\xe0\x1c\x83\x7e\x5d\xbd\xcd\xa6\x1e\x1b\x1c\x9a\xb3\xd9\xa0\x5c\x3f\x57\x53\x7f\xbd\x78\x41\xbf\x6f\x24\xb3\xfe\x94\x0a\x16\x13\xa3\x7b\x4b\x2b\xcf\xe5\x31\x62\x49\xb9\x9d\x49\xf4\x37\xcf\xb5\xeb\x5b\x37\x96\xc6\xe9\x23\xb0\xcc\x59\x76\x0f\xae\x84\x7e\xd5\xd6\x06\xc7\x86\x94\xd2\x71\xc7\x86\xa3\x9b\xd1\xe3\xe8\x64\xd3\x8a\x02\x27\x9a\xf6\xf3\xbb\x72\x14\xd1\xea\x5c\xd7\xfc\x9a\xf4\x31\xc1\xaf\x47\xa7\xb7\xc8\x35\xe9\xd3\xa5\x6e\x68\x90\xda\x54\xb1\xd3\xf4\x47\x19\x22\x78\x1a\x7c\xcb\x95\x32\xff\x08\xfa\xfe\xa8\xbf\xe1\xb9\x86\x4c\xfe\xd3\x93\x6f\xe8\x6f\xa0\x3c\x99\x24\x39\xe9\x00\x29\x9f\x73\x6d\xd4\xaf\x69\xfb\xe5\xdf\x64\x55\x5e\x99\x24\xa6\xed\xcf\x99\x93\xf2\x79\xb9\x4a\xa4\xc2\x6b\x00\x3b\x0f\x54\x24\xa6\xb4\xbb\xa7\x95\x8a\x27\x58\xe2\x97\x4f\xe9\x4c\xa0\x20\x64\xa2\xe7\x68\xb7\x61\xf6\x66\x53\x86\x6d\x96\xa9\x74\x76\x66\x57\x13\x29\x34\x17\x0b\x32\x9b\x6d\x89\x50\x5c\xa5\x6f\x00\x36\x1b\xb3\x33\xe7\x6d\xb0\x38\x9d\xf2\x79\x79\xba\x7a\xd1\x8f\x3f\x8f\xca\x87\x00\x4b\xdf\x1e\x28\xd0\x0d\x76\x51\xa4\x00\x74\xfe\x54\x14\xbd\xdb\xe5\xb6\x91\xd5\x76\xdf\xe8\x1a\x76\x61\xee\xbf\x01\x00\x00\xff\xff\x2f\xd6\x95\x71\xed\x09\x00\x00"

func mockGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mockGoTpl,
		"mock.go.tpl",
	)
}

func mockGoTpl() (*asset, error) {
	bytes, err := mockGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock.go.tpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1546799589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
	"mgo_record.go.tpl": mgo_recordGoTpl,
	"mock.go.tpl": mockGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
	"mgo_record.go.tpl": &bintree{mgo_recordGoTpl, map[string]*bintree{}},
	"mock.go.tpl": &bintree{mockGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

