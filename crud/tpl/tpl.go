// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// mgo_record.go.tpl
// mock.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4f\x6f\xda\x40\x10\xc5\xcf\xec\xa7\x98\x9a\x2a\xb2\x11\xb2\xef\x34\x41\xaa\x62\x9a\x22\xa1\x12\x95\x44\x3d\x54\x55\xe2\x3f\x83\x99\xc4\xde\x75\x76\x87\xa0\x08\xf1\xdd\x2b\x1b\x3b\x4d\x6c\x87\x46\xe4\x06\x6b\xcf\x7b\x6f\x7e\x3b\x63\xcf\x83\x73\x15\x23\x24\x28\x51\x07\x8c\xf1\x17\xf0\x15\x48\xc5\xa0\xb1\x3e\x03\x5e\x21\xa8\x47\xd4\x1b\x4d\x8c\x10\x2c\x19\x35\x60\x4c\x4c\x32\x71\x85\xc8\x83\xe8\x3e\x48\x10\x4e\xc1\xbd\xac\x7e\x8e\x85\xa0\x2c\x57\x9a\xc1\x16\x3d\x2b\x21\x5e\xad\x43\x37\x52\x99\x97\xa4\x2a\x0c\x52\x43\x89\xf4\xb2\x44\x59\x87\x1e\x7a\xa1\x51\xd2\x12\x8e\x10\x9e\x57\x68\x5f\xe7\x39\xea\xef\xeb\x2c\x87\xf1\x2f\xe2\xd5\xd4\x07\x32\x8d\x73\xd8\x10\xaf\x60\xea\x0b\x7e\xca\xb1\xbb\xc6\xb0\x5e\x47\x0c\x5b\xd1\x9b\xfa\x50\x38\xb8\xf3\xf0\x0e\x23\x9e\xc6\x70\x5b\xfc\x1d\x59\x37\x14\x0f\x55\x46\x8c\x59\xce\x4f\x16\xdc\x95\x87\xa7\xe0\xce\xd4\x06\xf5\x42\x06\xf7\x08\xe3\x1b\x8a\xad\x5b\xd1\x3b\x05\x77\xae\x29\x21\x19\xa4\x30\xae\xeb\x87\x24\x53\x92\x68\xdd\x8a\x5d\x47\xf4\x05\xea\x47\x8a\x10\xfa\x79\xc0\xab\x91\xe5\x35\x84\x3d\xab\xdf\x15\xbe\xae\xfa\x97\x3e\x0e\x61\x90\x25\xca\x3d\x57\x69\x8a\x11\x93\x92\x95\xdd\x0f\xdc\x74\xd7\x9e\x6b\x2c\xee\x32\x00\x89\x9b\x6e\x79\xb1\x5c\xcb\xe8\x4d\x01\xbb\x6d\xe9\x80\x3d\xe8\x7c\x77\x08\xa8\xb5\xd2\x4e\x91\x54\x23\xaf\xb5\x84\x93\xce\x17\xb7\x71\xb8\x1b\x82\xa4\xb4\x4a\xff\x1c\xb2\x71\xb1\x7d\xad\xd6\x8c\x23\xeb\x72\xbe\xb8\x82\x02\x52\x19\xd5\x36\xd0\xed\xef\x54\x42\x76\x8d\xb7\x92\x19\xbc\xba\x31\x07\x6c\xd4\xba\x1d\x15\x8c\x1b\x87\xee\x54\x1a\xd4\xdc\x50\x70\xaa\x9c\xd7\x79\x5c\x2f\xc6\x5b\x49\xaf\xaf\xc0\xdb\xb6\xe7\x66\xf7\x8e\xf0\x7b\xf5\x86\x75\x6b\x5e\xbd\x01\xf4\x65\x90\x61\xe7\x74\xf6\x61\xe0\x0d\xe1\xa8\xf6\xcb\xee\xf7\x11\xa6\x71\x2b\xc4\x70\x9f\xc2\xdf\x6e\xad\xcf\x06\xd9\x6a\x9a\xec\x76\x35\x23\x1f\x53\x3c\xcc\xc8\x9f\xcc\x26\x57\x93\xa3\x31\xed\x0d\x3e\x8c\xe9\x20\x87\x9f\x98\xa9\xc7\x2e\x0e\x75\x97\x17\xc8\x87\x5a\xbc\x98\x1c\x3f\x06\x17\xd8\x1c\xbf\xa3\x9a\xeb\x18\x82\xd6\x77\xb1\x5c\xd8\x17\x08\x1e\x60\x74\xb6\x07\xf0\x8d\x64\xdc\xd9\x7e\xaf\xa8\x38\x83\x07\x77\x2e\xd1\x3e\x69\xae\x49\x8f\x96\xa5\xe4\xa7\xb3\x62\xbb\x0b\xc9\x1a\xab\xa4\xb4\x74\x13\xbd\xdd\x33\xea\xd7\xd5\x2f\x3f\x08\x33\x32\x0c\x6a\xf9\x5f\xc4\xef\xc0\x59\x48\xd9\x6a\xb9\x34\xc8\x43\x48\x29\x23\x06\x92\xdc\x02\x64\xe0\xf7\x9f\x23\x18\xd9\x92\x52\xc7\x5d\xdc\x53\x5e\x79\x38\xee\xac\xf0\xb0\x4b\xa7\x17\xb8\xbe\xa6\x69\x13\x97\xf9\x18\x2f\x53\x03\xfb\x1b\x00\x00\xff\xff\xd8\x2e\x11\x0f\xcd\x07\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 1997, mode: os.FileMode(420), modTime: time.Unix(1547709884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mgo_recordGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdb\x6e\xdb\x38\x10\x7d\xb6\xbe\x62\xaa\x14\x85\x94\x0a\x52\xf7\xd5\x6d\x0a\x2c\x62\x6f\xd7\xd8\xa0\x29\x72\xc1\x02\x5b\x14\x89\x2e\x63\x87\x8d\x44\x2a\x14\x6d\x6f\xe0\xfa\xdf\x17\xbc\xc8\xd6\xd5\x71\x9c\x3c\xae\x9f\x14\x72\xe6\xcc\xf0\x9c\x21\x39\x4c\x10\xc0\x29\x4b\x10\x66\x48\x91\x87\x02\x93\x8f\x30\x62\x40\x99\x00\x8e\xe5\x18\x88\x3b\x04\xb6\x40\xbe\xe4\x44\x20\x84\x53\x81\x1c\x30\x21\x82\xd0\x99\x6f\x59\x79\x18\xdf\x87\x33\x84\x4f\xe0\x7f\x33\x9f\x9f\x2d\x8b\x64\x39\xe3\x02\x1c\x6b\x60\x0b\x92\xa1\x6d\x59\x03\x7b\x46\xc4\xdd\x3c\xf2\x63\x96\x05\xb3\x94\x45\x61\x5a\x90\x19\x0d\xb2\x19\xb3\x77\x4d\x06\x51\xc1\xa8\x6d\xb9\x96\x15\x04\x32\xc8\x75\x9e\x23\xff\x73\x9e\xe5\xf0\xf9\x6f\x22\xee\x26\x23\x20\x45\x63\x1c\x96\x44\xdc\xc1\x64\x64\x89\xc7\x1c\xbb\x7d\x0a\xc1\xe7\xb1\x80\x95\x35\x98\x8c\x40\x46\xf0\xcf\xa3\x9f\x18\x8b\x49\x02\xf2\x77\x2b\x87\x86\xf6\x0d\x49\x3c\x96\x11\x81\x59\x2e\x1e\x6d\xf8\xa9\x06\x3f\x81\x7f\xc6\x96\xc8\x2f\x69\x78\x8f\xf0\xf9\x86\x24\xf6\xad\x35\x68\x64\x00\x55\x18\x8f\xd0\x94\x50\x94\x66\xa7\x1c\x43\x81\x57\x24\x43\x90\xbc\xf8\xea\xcb\x98\xc5\x6a\xee\x46\x8e\xb7\xa3\x56\x26\x25\xce\x75\x9e\xf4\xe2\xcc\xd5\x5c\x0f\x4e\x65\xd2\xbe\xb5\xd6\x56\x17\x47\x17\x18\x33\x9e\xd4\x39\x6a\xfc\x9a\x94\x3d\x87\x30\xae\xe0\x3b\x79\x93\x81\x7a\xa0\xdb\xb4\xef\x2b\xcd\x05\xc6\x48\x45\x35\xfb\xe3\x86\x5a\x26\x04\x57\x86\x6d\x58\x3d\xae\xe4\x9b\x73\x5e\xc7\xea\x81\x8a\xb5\x61\x87\x8e\x7a\x62\x9b\x97\x52\xce\xfc\xb6\x52\xd6\xea\x47\xc7\xef\x11\xb4\x32\x59\xc9\xb0\x02\xd2\x03\x6a\x12\xe9\x2b\xb7\xca\xac\x84\x95\xfe\x45\xad\x02\x48\x9d\xd2\x12\x56\x3a\x14\x6d\x3c\x35\xac\x0b\xae\xb5\x8d\x2f\x91\x2f\x48\x8c\x70\x94\x87\xe2\x6e\x68\x07\x0d\x15\x03\xfb\xa8\xab\x48\x4b\xaf\x6d\x95\x26\x51\xa9\x49\x36\x63\xfe\x29\x4b\x53\x8c\x05\x61\x54\xce\x98\x92\x6e\xce\xe8\x74\xbe\xe2\xb2\x1b\x5b\xef\x56\x08\x81\xe2\xb2\x3b\xbc\x35\x9d\xd3\xb8\x17\xc0\x49\xa2\x66\x48\x17\x9c\xe3\x4e\x5b\x0f\x90\x73\xc6\x5d\xbd\x12\x93\xef\xf0\x04\x92\xc8\x1f\x85\x22\x8c\xc2\x02\xfd\x53\x27\x89\xfc\xaf\x61\x86\xf0\x1e\x6c\xb3\x8f\x6c\x77\x6b\xef\x8f\x69\x31\xe7\x38\xa1\x09\xfe\xeb\xc8\xb8\xea\x6b\xf5\x17\x3e\x0e\xe1\xfb\x8f\x42\x70\x42\x67\xab\xae\x5d\xb2\x5e\xbb\xd6\x80\xa3\x98\x73\x0a\xef\x3a\xd3\x5b\x59\x83\x41\x12\x0d\x0d\xc3\x49\xe4\xa9\xbf\x75\xd8\x21\x94\x5f\x9e\x35\x58\x7b\x40\x49\x6a\x98\xdd\x10\xd8\xd8\x25\x47\x9c\xcd\x05\x0e\xed\x6f\xe7\x97\x57\x20\x05\x56\x34\x3a\x45\x73\x3b\x99\xe0\xae\x01\x72\xca\xd4\x0d\x4c\xc3\xda\x05\x07\x39\xaf\xf0\x68\x56\x54\xf8\x49\xe4\x4f\x68\x81\x5c\x38\xef\xba\xae\x03\xb9\xb8\xfa\xf8\xd0\x6c\xed\x4a\x34\xb9\xe2\xed\xb1\x3b\xd4\xe7\xd4\x57\xb6\x74\x5c\xb9\x6a\xd7\xac\x58\x5b\xa8\x3b\xb3\x6f\xcd\xd7\x57\x10\xac\xda\x22\xac\xf7\xa0\x41\xa3\x37\x68\x68\xdd\x60\xc1\x31\x1c\xd1\x30\xc3\xce\x03\xf1\x08\x8e\x03\x0f\x9e\x49\x24\x99\xca\x3f\x64\x39\x16\xbe\x2e\xbb\x56\x0e\x4d\x4c\xf7\xa3\x72\x79\x73\x22\xcb\x41\x62\x94\x6a\x20\xe7\xd6\x60\x6d\xd5\xd5\xd1\x0b\x9b\x74\xc1\xaa\xb5\x8d\x56\x2b\xfb\x6d\x81\xc2\xf6\x9a\xf5\xf9\x6a\x0a\xae\x37\x1a\x8e\x30\xc5\xdd\x1a\x8e\xc6\x67\xe3\xab\xf1\xc1\x32\xea\x00\x2f\x96\xf1\x30\x99\x28\x49\x9f\xa7\xcd\x05\x66\x6c\xd1\xa5\x4d\xc9\xd7\x17\x14\xbb\xc8\xfa\x32\x3e\xbc\xe0\xbf\xa0\x78\x0d\x9a\x76\x97\xbb\x2e\x21\x75\x00\x57\xc8\x7c\xd0\x3c\x26\x91\xff\x07\xa1\x49\xe7\xf2\x07\xd2\xe3\x04\x1e\xfc\x73\x8a\xea\x64\xa9\xd6\xff\x46\x8e\x36\xcd\x94\xa4\x5e\xc9\x75\x39\xd6\x28\xd5\xca\x21\x7a\x46\x0a\x01\x6c\xfa\x24\xc5\x7b\xd0\x29\xa1\x9c\x42\x84\x5c\x37\x08\x5b\xea\xd4\x98\xbe\xed\xf5\x01\x81\x34\x69\x74\x97\x5b\x63\xa4\x49\xd5\x94\x4d\xa7\x05\x0a\x0f\x52\x92\x11\x21\xfb\x82\x16\xe1\x05\x7c\xff\xb1\x0f\xe7\xf2\x6a\xc9\x24\xed\x66\xcf\xaf\x15\x87\x6f\x36\x09\xfb\x93\xe2\x1f\xe4\xcc\x71\xe1\xd7\x2f\x78\x63\x52\xdc\x0e\x4a\x86\xb3\x0f\x75\xff\x3e\x00\x69\x2b\x8d\x4f\x20\xcc\x73\xa4\x89\x93\x7d\x28\x8f\x1a\x16\x8f\x53\xcc\x56\xf6\xdb\x99\x40\xdb\x83\x8d\xb3\xbc\x23\x07\x25\x64\x67\xf0\xa7\x00\x53\x79\x7e\x19\xcf\x0d\x5a\x56\x71\x69\x7a\x54\xbb\x7e\x0f\xb2\x0f\xd2\x69\xdd\x2c\x4d\x27\x73\xfd\xcb\x7b\x92\x3b\x5a\x08\xd7\x3f\x93\x42\x38\x4a\x8e\x4a\x8d\xfe\x9e\xa6\xcd\x1a\x2d\x5e\x56\xa4\x45\xed\xaa\x67\x73\xba\x57\x99\xc6\xd2\x70\x9f\x2b\x5f\xda\xbd\x72\xb1\xba\xe0\xa8\xf0\xb2\x4a\x9b\xfb\xfd\xff\xc2\x3b\xa0\xf0\x36\x95\xf1\xe0\x6b\xbd\xca\x3b\x41\xf7\x83\x3b\x8e\x2e\x7d\x3f\x41\x2a\x2d\x6a\xf5\xa1\x27\x0e\xbd\x30\xb6\x71\x5f\xa1\x4b\x7a\xfa\x64\xd3\xe1\x3a\xce\x37\xd3\x0f\xf7\xdd\x29\xa6\x5f\x57\x2c\x6e\x1a\x9c\x8e\x3c\x9a\x5d\xd5\x64\xb4\x5e\x1f\xba\xdb\x4d\xae\x2f\xdb\xf3\x06\x64\xb3\xf3\x9f\xd2\xa3\xa7\x0d\xa9\x6b\xe1\x81\x79\x6f\xb6\x1b\x51\xc5\x9d\x4c\x71\xe1\x6d\x7b\x9b\xae\xae\x60\xd7\xb2\xca\x15\xa9\xbd\x5f\xc1\x79\x8e\x0e\x0b\x5f\x73\x5f\x96\xf9\xd3\xd1\x2a\x3d\x94\x09\xd3\xfd\x06\xd1\x93\xed\x0e\x76\x32\x32\xcf\x2d\x19\x5a\xf6\xae\xfa\x1f\x06\x66\xf0\xdd\xc2\xaf\x9b\x4b\x0b\xf3\xfa\xd7\x26\xe5\xff\x20\x36\x9e\xba\xeb\x85\x85\xbf\x6d\x82\x2b\x4e\x1d\x3d\xb1\x7e\xf6\x97\x8f\x3e\x7d\x72\xbe\x87\xdf\x36\xef\x9d\xff\x02\x00\x00\xff\xff\x85\x26\x0c\x9c\x3f\x14\x00\x00"

func mgo_recordGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgo_recordGoTpl,
		"mgo_record.go.tpl",
	)
}

func mgo_recordGoTpl() (*asset, error) {
	bytes, err := mgo_recordGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo_record.go.tpl", size: 5183, mode: os.FileMode(420), modTime: time.Unix(1547719526, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mockGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xf2\x36\x14\x7d\x8e\x7f\xc5\x59\x90\x50\x42\x33\xd2\xbe\xb2\xc2\x4b\x41\x1d\x52\xd5\x56\x6a\xab\x3d\x54\x55\x9b\x91\x1b\xf0\x1a\xec\xc8\x31\xb0\x09\xf8\xef\x93\x9d\xd0\x42\x92\xb2\x8e\x97\xef\x7b\xc2\xbe\xb9\x3e\xf7\xf8\x1c\xdf\x4b\x18\xe2\x4a\xc6\x84\x29\x09\x52\x91\xa6\xf8\x37\x0c\x25\x84\xd4\x50\xb4\x8b\x41\xcf\x08\x72\x49\x6a\xa5\xb8\x26\x44\x89\x26\x05\x8a\xb9\xe6\x62\xda\x65\x2c\x8b\x26\xef\xd1\x94\x70\x89\xee\x7d\xb9\x1c\x30\xc6\xe7\x99\x54\x1a\x1e\x73\x5c\x52\x4a\xaa\xdc\x65\x3e\x63\x2c\x0c\x4d\xde\x53\x96\x91\xfa\x7d\x31\xcf\x30\xf8\x83\xeb\xd9\x78\x08\x9e\x57\xe2\x58\x71\x3d\xc3\x78\xc8\xf4\x3f\x19\x35\x9f\xc9\xb5\x5a\x4c\x34\xd6\xcc\x31\x00\x42\xe3\xed\xaf\x5c\x8a\x9e\x7b\x89\xee\x8d\x5c\x91\x7a\x10\xd1\x3b\x61\xf0\xca\xe3\x20\xd7\x8a\x8b\xa9\xfb\xc6\x9c\x4b\x74\xef\x14\x9f\x72\x11\xa5\x18\xb0\x6d\x03\xa3\x07\x52\x4b\x3e\x21\xb4\xb2\x48\xcf\x7a\x6e\x58\x81\x0b\xdd\x56\x13\xa7\xdd\xa9\x4f\x52\x71\xa4\xa3\x1c\xcf\x2f\x9d\x26\xf2\x65\xe5\x5b\x5a\x35\xc3\x5c\x29\x32\xca\x47\x10\xb4\x6a\xae\xc4\x92\x85\x98\x7c\x09\xe0\xf9\xf0\x3a\x8d\x5f\x02\x58\x3f\x7c\x43\x51\x91\x5e\x28\x81\x76\x63\xe2\x7a\x1b\x40\xf0\xb4\x64\xfa\x41\xa8\x62\x53\x4b\xc9\x85\xa6\x9e\x7b\x7f\xf7\xf0\x08\xa3\x8d\xa5\xe5\xe5\x68\xae\xee\x97\x40\xde\x4e\xd5\x12\xa6\x73\xe0\x8b\x0f\x8f\x94\xda\x23\x7a\x98\x3d\x1e\xa2\xd7\x47\x4a\xc2\xcb\xbb\x56\x65\x1f\x67\xb8\x28\x14\x37\x5f\xda\x8d\xcf\x65\xcd\x1c\x67\x3c\xec\xa1\x86\x15\x30\xe7\xf0\x59\xf4\x2c\x9d\xbd\xa4\x80\x39\x5b\xe6\x94\xc5\xd0\x47\x94\x65\x24\xe2\x5d\xf5\x00\xe6\xc7\xff\x90\xf3\x53\xb4\xa7\x2c\xde\xf5\xcf\x57\xb2\x3d\x3d\x22\x5c\xd7\x5f\xec\xf6\x1b\x4a\x16\xe8\x5e\xed\x3e\xa6\x15\xc2\x0e\x5a\x22\x9a\x53\x53\x37\xb8\x2d\x74\xc2\x00\xff\xcf\x01\x9e\xe0\x1c\x83\x7e\x5d\xbd\xcd\xa6\x1e\x1b\x1c\x9a\xb3\xd9\xa0\x5c\x3f\x57\x53\x7f\xbd\x78\x41\xbf\x6f\x24\xb3\xfe\x94\x0a\x16\x13\xa3\x7b\x4b\x2b\xcf\xe5\x31\x62\x49\xb9\x9d\x49\xf4\x37\xcf\xb5\xeb\x5b\x37\x96\xc6\xe9\x23\xb0\xcc\x59\x76\x0f\xae\x84\x7e\xd5\xd6\x06\xc7\x86\x94\xd2\x71\xc7\x86\xa3\x9b\xd1\xe3\xe8\x64\xd3\x8a\x02\x27\x9a\xf6\xf3\xbb\x72\x14\xd1\xea\x5c\xd7\xfc\x9a\xf4\x31\xc1\xaf\x47\xa7\xb7\xc8\x35\xe9\xd3\xa5\x6e\x68\x90\xda\x54\xb1\xd3\xf4\x47\x19\x22\x78\x1a\x7c\xcb\x95\x32\xff\x08\xfa\xfe\xa8\xbf\xe1\xb9\x86\x4c\xfe\xd3\x93\x6f\xe8\x6f\xa0\x3c\x99\x24\x39\xe9\x00\x29\x9f\x73\x6d\xd4\xaf\x69\xfb\xe5\xdf\x64\x55\x5e\x99\x24\xa6\xed\xcf\x99\x93\xf2\x79\xb9\x4a\xa4\xc2\x6b\x00\x3b\x0f\x54\x24\xa6\xb4\xbb\xa7\x95\x8a\x27\x58\xe2\x97\x4f\xe9\x4c\xa0\x20\x64\xa2\xe7\x68\xb7\x61\xf6\x66\x53\x86\x6d\x96\xa9\x74\x76\x66\x57\x13\x29\x34\x17\x0b\x32\x9b\x6d\x89\x50\x5c\xa5\x6f\x00\x36\x1b\xb3\x33\xe7\x6d\xb0\x38\x9d\xf2\x79\x79\xba\x7a\xd1\x8f\x3f\x8f\xca\x87\x00\x4b\xdf\x1e\x28\xd0\x0d\x76\x51\xa4\x00\x74\xfe\x54\x14\xbd\xdb\xe5\xb6\x91\xd5\x76\xdf\xe8\x1a\x76\x61\xee\xbf\x01\x00\x00\xff\xff\x2f\xd6\x95\x71\xed\x09\x00\x00"

func mockGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mockGoTpl,
		"mock.go.tpl",
	)
}

func mockGoTpl() (*asset, error) {
	bytes, err := mockGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock.go.tpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1546799589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
	"mgo_record.go.tpl": mgo_recordGoTpl,
	"mock.go.tpl": mockGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
	"mgo_record.go.tpl": &bintree{mgo_recordGoTpl, map[string]*bintree{}},
	"mock.go.tpl": &bintree{mockGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

