// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x51\x4f\xe2\x4e\x14\xc5\x9f\x99\x4f\x71\xff\x35\x31\xad\x21\xed\x3b\xff\xd5\x64\x43\x59\xd3\x84\x88\x59\x31\xfb\xb0\xd9\x68\xdb\xb9\x94\xab\xd3\x99\x3a\x33\x48\x8c\xe1\xbb\x6f\x06\x8a\x4a\x5b\xbb\x1b\xf6\x0d\xca\xdc\x73\x7e\xe7\xdc\x0e\x51\x04\x63\xc5\x11\x0a\x94\xa8\x53\x8b\xfc\x7f\x88\x67\x70\x35\x9b\xc3\x24\x4e\xe6\x21\x63\x55\x9a\x3f\xa6\x05\xc2\x17\x08\xaf\xeb\x8f\x17\x8c\x51\x59\x29\x6d\xc1\x67\x03\xaf\x20\xbb\x5c\x65\x61\xae\xca\xa8\x10\x2a\x4b\x85\xa1\x42\x46\x65\xa1\xbc\xbe\x1f\xa3\xcc\x28\xe9\xb1\x80\xb1\x28\x72\xda\x63\xbd\xe2\xb7\x55\x85\x1a\x2e\x7e\x90\x5d\x26\x31\x90\x69\x3c\x87\x35\xd9\x25\x24\x31\xb3\x2f\x15\x76\xcf\x18\xab\x57\xb9\x85\x57\x36\x48\x62\x70\x0e\xe1\x2c\x7b\xc0\xdc\x26\x1c\xee\xdd\xd7\x91\x77\x47\x7c\xa8\x4a\xb2\x58\x56\xf6\xc5\x83\x87\xed\xc3\x5a\x6b\xaa\xd6\x4e\xeb\x8e\xb8\x77\xcf\x06\x0d\xf3\x7a\x7e\x48\x52\x90\x44\xef\x9e\x6d\x3a\xd0\x6f\x50\x3f\x53\x8e\x70\x52\xa5\x76\x39\xf2\xa2\x43\xe1\xc8\x3b\xe9\x62\xdf\x0f\xbd\xc3\xf3\x0c\xce\xca\x42\x85\x63\x25\x04\xe6\x96\x94\xac\xdd\xae\x70\xdd\x3d\x3b\xd6\x98\x5a\x84\x14\x24\xae\xbb\xe5\xd9\x62\x25\xf3\x4f\x05\xfc\xb6\x65\x00\xfe\x59\xe7\xd9\x21\xa0\xd6\x4a\x07\x8e\x54\xa3\x5d\x69\x09\xa7\x9d\x07\x5f\x79\xb6\x19\x82\x24\x51\xd3\xbf\x41\x36\xaa\x3d\xd1\x6a\x65\x71\xe4\x5d\xcf\x6e\xe6\xe0\x4a\xda\xa2\xfa\x19\x74\xfb\x07\xb5\x90\x7f\xd8\x6e\xf3\x74\x00\x3e\x6a\xdd\x66\xcd\x42\x9e\x85\x89\x34\xa8\x6d\x43\x21\xa8\x39\x6f\x2b\xee\x38\xed\xb2\xb9\xa9\x77\xd2\xdb\x39\x44\xaf\xad\xd7\x66\xf3\xc6\x6e\x3e\x65\xdf\x89\xfb\xad\x59\xb7\x7e\x92\xc5\x10\x8e\x4b\x65\x5c\xaa\x9d\x76\xc2\xdb\xea\x4d\xd9\x7d\xd4\x18\x05\xf6\x47\x8d\x27\xd3\xc9\x7c\x72\x6c\xda\x9d\xfe\xa7\x69\x7b\xd3\x7c\xc7\x52\x3d\x77\xa6\xd9\xd3\x5f\xa2\xed\x43\xbf\x9c\x1c\xbd\xa5\x4b\x6c\xbe\x1c\x07\xd0\xfd\x3b\xda\x5e\x90\x0f\xa1\x9e\x60\x74\xbe\x8b\xf4\x8d\x24\xef\x0e\x34\x70\x23\xe7\xf0\x14\xce\x24\xfa\xa7\xcd\x65\x0d\x68\xb1\xd5\xfc\xef\xdc\x5d\x27\xa7\xb9\x6f\x4a\x92\xd8\xda\xb1\xc1\xe6\xad\xbd\xc3\xe9\x8f\x37\x70\x4a\xc6\x82\x5a\xfc\xb1\xb4\xbf\x68\xc8\x49\xf9\x6a\xb1\x30\x68\x87\x20\xa8\x24\x0b\x24\x6d\xab\x1b\x03\x3f\x7f\x9d\x75\xfd\x57\xf7\x97\xe4\x4b\x12\x41\x78\xf3\x48\x55\xed\x11\x84\x53\xe7\xe1\x6f\x9d\x3e\xd4\xf5\x55\x88\x66\x5d\xe6\xdf\xfa\x32\xfb\xc2\x7e\x07\x00\x00\xff\xff\x08\x3d\x93\x8e\x1b\x07\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 1819, mode: os.FileMode(420), modTime: time.Unix(1546218045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

