// Code generated by go-bindata.
// sources:
// mgo.go.tpl
// mock.go.tpl
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mgoGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x62\xaa\x14\x85\x94\x0a\x72\xf7\xea\x36\x01\x16\x71\xb6\x6b\x6c\xd0\x14\x4d\x8a\x05\xb6\x28\x5a\x7d\x4c\x1c\xb6\x12\xe9\x52\xb4\xbd\x85\xeb\xff\xbe\x18\x92\xb2\xbe\x93\xd4\xcd\x71\x75\x4a\xc8\xe1\x9b\xd1\x7b\x8f\xe4\xc8\x93\x09\x9c\x89\x0c\x61\x81\x1c\x65\xac\x30\x7b\x09\x33\x01\x5c\x28\x90\x58\x8d\x81\xba\x45\x10\x6b\x94\x1b\xc9\x14\x42\x7c\xa3\x50\x02\x66\x4c\x31\xbe\x88\x5c\x77\x19\xa7\x5f\xe3\x05\xc2\x2b\x88\xde\xda\x3f\x4f\x5d\x97\x15\x4b\x21\x15\xf8\xae\xe3\x29\x56\xa0\xe7\xba\x8e\xb7\x60\xea\x76\x95\x44\xa9\x28\x26\x8b\x5c\x24\x71\x5e\xb2\x05\x9f\x14\x0b\xe1\xdd\x35\x39\x49\x4a\xc1\x3d\x37\x70\xdd\xc9\x84\x92\xbc\x5f\x2e\x51\xfe\xb9\x2a\x96\x70\xfa\x37\x53\xb7\xf3\x19\xb0\xb2\x33\x0e\x1b\xa6\x6e\x61\x3e\x73\xd5\xf7\x25\x0e\xaf\x29\x95\x5c\xa5\x0a\xb6\xae\x33\x9f\x01\x65\x88\x2e\x93\x2f\x98\xaa\x79\x06\xf4\x7c\xa6\xa1\xa9\xf7\x89\x65\xa1\x28\x98\xc2\x62\xa9\xbe\x7b\xf0\x45\x0f\xbe\x82\xe8\x42\x6c\x50\x5e\xf1\xf8\x2b\xc2\xe9\x27\x96\x79\x9f\x5d\xa7\x53\x01\x34\x61\x42\xc6\x73\xc6\x91\xc2\xce\x24\xc6\x0a\xaf\x59\x81\x40\xbc\x44\xfa\x2f\x1b\x96\xea\xb9\x4f\x34\xde\xcf\xda\x98\x24\x9c\xf7\xcb\x6c\x14\x67\xa5\xe7\x46\x70\x1a\x93\xde\x67\x77\xe7\x0e\x71\xf4\x0e\x53\x21\xb3\x36\x47\x9d\xa7\x4b\xd9\xcf\x10\x26\x35\xfc\x20\x6f\x94\x68\x04\xba\x4f\xfb\x43\xa5\x79\x87\x29\x72\xd5\xac\xfe\xb8\xa3\x96\x4d\x21\x75\x60\x1f\xd6\x8c\x6b\xf9\x56\x52\xb6\xb1\x46\xa0\x52\x13\x38\xa0\xa3\x99\xa8\xeb\xd2\xca\xd9\xa7\x96\xb2\xe5\x1f\x93\x7f\x44\xd0\xc6\x64\xa3\xc2\x06\xc8\x08\xa8\x2d\x64\xcc\x6e\x8d\x59\x82\xa5\xf5\x65\xcb\x01\xac\x4d\x69\x05\x4b\x0b\xca\x3e\x9e\x1e\x36\x86\xeb\x6d\xe3\x2b\x94\x6b\x96\x22\x1c\x2d\x63\x75\x3b\xf5\x26\x1d\x15\x27\xde\xd1\x90\x49\xab\x55\xb5\x4b\xb3\xa4\xd2\xa4\x58\x88\xe8\x4c\xe4\x39\xa6\x8a\x09\x4e\x33\xd6\xd2\xdd\x19\x53\xce\x1b\xdc\x0c\x63\x9b\xdd\x0a\x31\x70\xdc\x0c\xa7\x77\x6f\x56\x3c\x1d\x05\xf0\xb3\xa4\x9b\x32\x00\xff\x78\x30\x36\x04\x94\x52\xc8\xc0\xbc\x89\xad\x77\x7a\x02\x59\x12\xcd\x62\x15\x27\x71\x89\xd1\x99\x9f\x25\xd1\x9b\xb8\x40\x78\x0e\x9e\xdd\x47\x5e\x50\xc7\x47\xe7\xbc\x5c\x49\x9c\xf3\x0c\xff\xf5\x29\xaf\xfe\x6b\xfb\x17\x7e\x9f\xc2\x87\x8f\xa5\x92\x8c\x2f\xb6\x43\xbb\x64\xb7\x0b\x5c\x47\xa2\x5a\x49\x0e\xcf\x06\xcb\xdb\xba\x8e\x93\x25\x53\xcb\x70\x96\x84\xfa\x7f\x93\x76\x0a\xd5\x5f\xa1\xeb\xec\x42\xe0\x2c\xb7\xcc\xee\x09\xec\xec\x92\x23\x29\x56\x0a\xa7\xde\xdb\xcb\xab\x6b\x20\x81\x35\x8d\x7e\xd9\xdd\x4e\x36\x79\x60\x81\xfc\xaa\x74\x0b\xd3\x89\x0e\xa0\x13\xd0\x3b\xdb\x27\xc7\x70\xc4\xe3\x02\x07\x8f\x8a\x23\x38\x9e\x68\x15\x6a\x25\xe8\x5d\x7b\x90\x27\x06\xf4\x0d\x6e\x2a\x5c\x3f\xd0\x91\x5c\x6c\x48\x31\x33\x2b\x36\x76\x94\x00\x4f\xa0\x8c\xb2\x24\x9a\xf3\x12\xa5\xf2\x9f\x0d\x5e\x49\x26\x1b\x3d\xf3\xd9\xb4\x97\x35\xdc\xcf\xbe\x82\xe8\x52\xb2\x05\xe3\x71\x0e\xa7\x53\xcd\x41\x23\xb2\x8e\xab\xaf\x9a\x29\x55\x46\x82\xd5\xb7\x86\x1d\xa2\xb8\x9d\x29\x93\xdd\xe8\x4a\x9f\x9c\x90\x7c\x8d\x62\xac\x2b\x3c\x4f\x53\x63\x56\xb8\x8d\x89\x5e\xa1\x0d\xf9\x4d\x3e\xdd\x40\x8c\x19\xe0\xfd\x35\x4c\xb6\x7d\x31\x76\x0f\xf0\x84\x41\x7f\x04\xc9\xef\x75\x55\xcb\x13\x8e\x65\x6a\x4a\xa2\x9a\x3d\xd8\xab\xa1\x8b\x19\xbc\x6c\x93\xeb\x54\x9b\x8d\x28\x75\x76\xee\x7e\xf3\x69\x9b\x98\x17\x9b\x0f\xc1\xea\x77\x9b\x6d\xb7\xde\xd3\x12\x95\x17\x76\x37\xab\xb1\x12\xe1\xb7\xc7\xa7\xf6\xa6\x6a\x19\xa5\xed\x87\xda\xb5\xb4\x89\xe9\x40\x30\x1a\xce\x30\xc7\xbb\x35\x9c\x9d\x5f\x9c\x5f\x9f\x1f\x2c\xa3\x49\xf0\xcb\x32\x1e\x26\x13\x67\xf9\xcf\x69\xf3\x0e\x0b\xb1\x1e\xd2\xa6\xe2\xeb\x35\xaa\xbb\xc8\x7a\x7d\x7e\xb8\xe1\x5f\xa3\x7a\x0c\x9a\xee\xb6\xbb\xb1\x50\xe7\x1c\x74\xbe\x19\x1e\xb3\x24\xfa\x83\xf1\x6c\xf0\xf5\x1d\x73\xd0\x7d\x8b\x2e\x39\xea\x23\xae\xe9\xff\xbd\x1c\x7d\x9a\x39\xcb\xc3\x8a\x6b\x67\xf0\x50\x69\x1e\x29\x17\xac\x54\x20\x6e\xee\xa5\xf8\x01\x74\x12\x94\x5f\xaa\x58\x9a\x6e\xa9\xa6\x4e\x8f\x99\xd6\xc7\xde\x09\x3c\xeb\xb4\xda\x75\x30\xf2\xac\x19\x2a\x6e\x6e\x4a\x54\x21\xe4\xac\x60\x8a\x9a\xa4\x1e\xe1\x25\x7c\xf8\xf8\x10\xce\xe9\x8c\x2d\xf6\xf7\xc9\x6c\xbb\xd3\x1c\x3e\xd9\x17\x1c\xcd\xcb\x7f\x50\x0a\x3f\x80\x1f\x3f\xe0\x89\x2d\xb1\x1e\x24\x86\x8b\x17\xed\xf5\x63\x00\x14\x4b\xc1\x27\x10\x2f\x97\xc8\x33\xbf\x78\x51\x1d\x35\x22\x3d\xcf\xb1\xd8\x7a\x4f\x17\x0a\xbd\x10\xf6\x8b\xa9\x61\x70\x2a\xc8\xc1\xe4\xf7\x01\xe6\x74\x7e\xd9\x95\x7b\xb4\xa2\xb1\xa4\xbb\xa2\xf9\x09\x14\x42\xf1\x82\x16\xed\xba\xd6\xf4\x8b\x20\xba\xfa\xca\x96\xbe\x11\x22\x88\x2e\x48\x08\x5f\xcb\xd1\xf0\xe8\xef\x79\xde\xf5\x68\xf9\x6b\x26\x2d\x5b\x7d\x8f\x58\xf1\x07\xd9\x34\xa5\xc0\x87\xf4\x3f\x14\xf7\xc8\x66\x0d\xc0\xd7\xe9\xc9\xa5\xdd\xfd\xfe\xbf\xf1\x0e\x30\xde\xde\x19\xdf\x22\xa3\x57\x75\x27\x98\xe6\xf8\x8e\xa3\xcb\xdc\x4f\x90\x53\x44\xcb\x1f\x66\xe2\xd0\x0b\xa3\xce\xfb\x08\x5d\xd2\xfd\x27\x9b\x49\x37\x70\xbe\xd9\x8f\x83\xb1\x3b\xc5\x7e\xbc\x68\x16\xf7\x0d\xce\x40\x1d\xdd\xae\x6a\x3e\xdb\xed\x0e\xdd\xed\xb6\xd6\x5f\xdb\xf3\x16\x64\xbf\xf3\xef\xd3\x63\xa4\x0d\x69\x6b\x11\x82\xfd\xf8\xee\x37\xa2\x9a\x3b\x2a\x71\x1d\xd6\xbd\xcd\x50\x57\x70\xd7\x6b\x55\x6f\xa4\xf7\x7e\x03\xe7\x67\x74\x58\x47\x86\xfb\xca\xe6\xf7\x67\x6b\xf4\x50\x36\xcd\xf0\xc7\x90\x99\xec\x77\xb0\xf4\x4d\xa4\x1f\x4a\x4d\xbd\xab\xf9\xf5\xc4\x0e\x3e\x5b\x47\xed\x70\x8a\xb0\x3f\x85\x98\x90\xea\x07\x99\xfd\x4a\xd3\xf5\xc2\x3a\xaa\x9b\xe0\xc6\xa2\x81\x9e\xd8\xfc\x06\x52\x7d\x01\x9b\x93\xf3\x39\xfc\x46\xdd\xb2\xde\xe7\xff\x05\x00\x00\xff\xff\xd4\x59\x6a\x09\x4c\x15\x00\x00"

func mgoGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mgoGoTpl,
		"mgo.go.tpl",
	)
}

func mgoGoTpl() (*asset, error) {
	bytes, err := mgoGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mgo.go.tpl", size: 5452, mode: os.FileMode(420), modTime: time.Unix(1550214953, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mockGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x51\x6f\xf2\x36\x14\x7d\x8e\x7f\xc5\x59\x90\x50\x42\x33\xd2\xbe\xb2\xc2\x4b\x41\x1d\x52\xd5\x56\x6a\xab\x3d\x54\x55\x9b\x91\x1b\xf0\x1a\xec\xc8\x31\xb0\x09\xf8\xef\x93\x9d\xd0\x42\x92\xb2\x8e\x97\xef\x7b\xc2\xbe\xb9\x3e\xf7\xf8\x1c\xdf\x4b\x18\xe2\x4a\xc6\x84\x29\x09\x52\x91\xa6\xf8\x37\x0c\x25\x84\xd4\x50\xb4\x8b\x41\xcf\x08\x72\x49\x6a\xa5\xb8\x26\x44\x89\x26\x05\x8a\xb9\xe6\x62\xda\x65\x2c\x8b\x26\xef\xd1\x94\x70\x89\xee\x7d\xb9\x1c\x30\xc6\xe7\x99\x54\x1a\x1e\x73\x5c\x52\x4a\xaa\xdc\x65\x3e\x63\x2c\x0c\x4d\xde\x53\x96\x91\xfa\x7d\x31\xcf\x30\xf8\x83\xeb\xd9\x78\x08\x9e\x57\xe2\x58\x71\x3d\xc3\x78\xc8\xf4\x3f\x19\x35\x9f\xc9\xb5\x5a\x4c\x34\xd6\xcc\x31\x00\x42\xe3\xed\xaf\x5c\x8a\x9e\x7b\x89\xee\x8d\x5c\x91\x7a\x10\xd1\x3b\x61\xf0\xca\xe3\x20\xd7\x8a\x8b\xa9\xfb\xc6\x9c\x4b\x74\xef\x14\x9f\x72\x11\xa5\x18\xb0\x6d\x03\xa3\x07\x52\x4b\x3e\x21\xb4\xb2\x48\xcf\x7a\x6e\x58\x81\x0b\xdd\x56\x13\xa7\xdd\xa9\x4f\x52\x71\xa4\xa3\x1c\xcf\x2f\x9d\x26\xf2\x65\xe5\x5b\x5a\x35\xc3\x5c\x29\x32\xca\x47\x10\xb4\x6a\xae\xc4\x92\x85\x98\x7c\x09\xe0\xf9\xf0\x3a\x8d\x5f\x02\x58\x3f\x7c\x43\x51\x91\x5e\x28\x81\x76\x63\xe2\x7a\x1b\x40\xf0\xb4\x64\xfa\x41\xa8\x62\x53\x4b\xc9\x85\xa6\x9e\x7b\x7f\xf7\xf0\x08\xa3\x8d\xa5\xe5\xe5\x68\xae\xee\x97\x40\xde\x4e\xd5\x12\xa6\x73\xe0\x8b\x0f\x8f\x94\xda\x23\x7a\x98\x3d\x1e\xa2\xd7\x47\x4a\xc2\xcb\xbb\x56\x65\x1f\x67\xb8\x28\x14\x37\x5f\xda\x8d\xcf\x65\xcd\x1c\x67\x3c\xec\xa1\x86\x15\x30\xe7\xf0\x59\xf4\x2c\x9d\xbd\xa4\x80\x39\x5b\xe6\x94\xc5\xd0\x47\x94\x65\x24\xe2\x5d\xf5\x00\xe6\xc7\xff\x90\xf3\x53\xb4\xa7\x2c\xde\xf5\xcf\x57\xb2\x3d\x3d\x22\x5c\xd7\x5f\xec\xf6\x1b\x4a\x16\xe8\x5e\xed\x3e\xa6\x15\xc2\x0e\x5a\x22\x9a\x53\x53\x37\xb8\x2d\x74\xc2\x00\xff\xcf\x01\x9e\xe0\x1c\x83\x7e\x5d\xbd\xcd\xa6\x1e\x1b\x1c\x9a\xb3\xd9\xa0\x5c\x3f\x57\x53\x7f\xbd\x78\x41\xbf\x6f\x24\xb3\xfe\x94\x0a\x16\x13\xa3\x7b\x4b\x2b\xcf\xe5\x31\x62\x49\xb9\x9d\x49\xf4\x37\xcf\xb5\xeb\x5b\x37\x96\xc6\xe9\x23\xb0\xcc\x59\x76\x0f\xae\x84\x7e\xd5\xd6\x06\xc7\x86\x94\xd2\x71\xc7\x86\xa3\x9b\xd1\xe3\xe8\x64\xd3\x8a\x02\x27\x9a\xf6\xf3\xbb\x72\x14\xd1\xea\x5c\xd7\xfc\x9a\xf4\x31\xc1\xaf\x47\xa7\xb7\xc8\x35\xe9\xd3\xa5\x6e\x68\x90\xda\x54\xb1\xd3\xf4\x47\x19\x22\x78\x1a\x7c\xcb\x95\x32\xff\x08\xfa\xfe\xa8\xbf\xe1\xb9\x86\x4c\xfe\xd3\x93\x6f\xe8\x6f\xa0\x3c\x99\x24\x39\xe9\x00\x29\x9f\x73\x6d\xd4\xaf\x69\xfb\xe5\xdf\x64\x55\x5e\x99\x24\xa6\xed\xcf\x99\x93\xf2\x79\xb9\x4a\xa4\xc2\x6b\x00\x3b\x0f\x54\x24\xa6\xb4\xbb\xa7\x95\x8a\x27\x58\xe2\x97\x4f\xe9\x4c\xa0\x20\x64\xa2\xe7\x68\xb7\x61\xf6\x66\x53\x86\x6d\x96\xa9\x74\x76\x66\x57\x13\x29\x34\x17\x0b\x32\x9b\x6d\x89\x50\x5c\xa5\x6f\x00\x36\x1b\xb3\x33\xe7\x6d\xb0\x38\x9d\xf2\x79\x79\xba\x7a\xd1\x8f\x3f\x8f\xca\x87\x00\x4b\xdf\x1e\x28\xd0\x0d\x76\x51\xa4\x00\x74\xfe\x54\x14\xbd\xdb\xe5\xb6\x91\xd5\x76\xdf\xe8\x1a\x76\x61\xee\xbf\x01\x00\x00\xff\xff\x2f\xd6\x95\x71\xed\x09\x00\x00"

func mockGoTplBytes() ([]byte, error) {
	return bindataRead(
		_mockGoTpl,
		"mock.go.tpl",
	)
}

func mockGoTpl() (*asset, error) {
	bytes, err := mockGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mock.go.tpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1546799589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mgo.go.tpl": mgoGoTpl,
	"mock.go.tpl": mockGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mgo.go.tpl": &bintree{mgoGoTpl, map[string]*bintree{}},
	"mock.go.tpl": &bintree{mockGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

